{
  "contractName": "BondedECDSAKeep",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "submittingMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "conflictingPublicKey",
          "type": "bytes"
        }
      ],
      "name": "ConflictingPublicKeySubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20RewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "KeepClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "KeepTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "PublicKeyPublished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        }
      ],
      "name": "SignatureRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "recoveryID",
          "type": "uint8"
        }
      ],
      "name": "SignatureSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SlashingFailed",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "bondTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "checkBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_signedDigest",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_preimage",
          "type": "bytes"
        }
      ],
      "name": "checkSignatureFraud",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isFraud",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "digest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "digests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "distributeERC20Reward",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "distributeETHReward",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "getMemberETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOpenedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "honestThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_digest",
          "type": "bytes32"
        }
      ],
      "name": "isAwaitingSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isTerminated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "memberStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "publicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "returnPartialSignerBonds",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "seizeSignerBonds",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_digest",
          "type": "bytes32"
        }
      ],
      "name": "sign",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "submitPublicKey",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_recoveryID",
          "type": "uint8"
        }
      ],
      "name": "submitSignature",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_signedDigest",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_preimage",
          "type": "bytes"
        }
      ],
      "name": "submitSignatureFraud",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isFraud",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_honestThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_memberStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeLockDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenStaking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keepBonding",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_keepFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "closeKeep",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submittingMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"conflictingPublicKey\",\"type\":\"bytes\"}],\"name\":\"ConflictingPublicKeySubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20RewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"KeepClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"KeepTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"PublicKeyPublished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"SignatureRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"recoveryID\",\"type\":\"uint8\"}],\"name\":\"SignatureSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SlashingFailed\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_signedDigest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_preimage\",\"type\":\"bytes\"}],\"name\":\"checkSignatureFraud\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isFraud\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeKeep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"digest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"digests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distributeERC20Reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeETHReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"getMemberETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOpenedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"honestThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_honestThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_memberStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeLockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keepBonding\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_keepFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_digest\",\"type\":\"bytes32\"}],\"name\":\"isAwaitingSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTerminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"memberStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnPartialSignerBonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"seizeSignerBonds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_digest\",\"type\":\"bytes32\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"submitPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_recoveryID\",\"type\":\"uint8\"}],\"name\":\"submitSignature\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_signedDigest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_preimage\",\"type\":\"bytes\"}],\"name\":\"submitSignatureFraud\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isFraud\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used as a master contract for clone factory in BondedECDSAKeepFactory as per EIP-1167.\",\"methods\":{\"checkBondAmount()\":{\"return\":\"The amount of the keep's ETH bond in wei.\"},\"checkSignatureFraud(uint8,bytes32,bytes32,bytes32,bytes)\":{\"details\":\"The function expects the signed digest to be calculated as a sha256 hash of the preimage: `sha256(_preimage))`. The digest is verified against the preimage to ensure the security of the ECDSA protocol. Verifying just the signature and the digest is not enough and leaves the possibility of the the existential forgery. If digest and preimage verification fails the function reverts. Reverts if a public key has not been set for the keep yet.\",\"params\":{\"_preimage\":\"Preimage of the hashed message.\",\"_r\":\"R part of ECDSA signature.\",\"_s\":\"S part of ECDSA signature.\",\"_signedDigest\":\"Digest for the provided signature. Result of hashing the preimage with sha256.\",\"_v\":\"Signature's header byte: `27 + recoveryID`.\"},\"return\":\"True if fraud, false otherwise.\"},\"closeKeep()\":{\"details\":\"The function can be called only by the owner of the keep and only if the keep has not been already closed.\"},\"distributeERC20Reward(address,uint256)\":{\"details\":\"This works with any ERC20 token that implements a transferFrom function similar to the interface imported here from OpenZeppelin. This function only has authority over pre-approved token amount. We don't explicitly check for allowance, SafeMath subtraction overflow is enough protection. If the value cannot be divided evenly across the signers, it submits the remainder to the last keep signer.\",\"params\":{\"_tokenAddress\":\"Address of the ERC20 token to distribute.\",\"_value\":\"Amount of ERC20 token to distribute.\"}},\"distributeETHReward()\":{\"details\":\"Only the value passed to this function is distributed. This function does not transfer the value to beneficiaries accounts; instead it holds the value in the contract until withdraw function is called for the specific signer.\"},\"getMemberETHBalance(address)\":{\"params\":{\"_member\":\"Keep member address.\"},\"return\":\"Current balance in wei.\"},\"getMembers()\":{\"return\":\"List of the keep members' addresses.\"},\"getOpenedTimestamp()\":{\"return\":\"Timestamp the keep was opened at.\"},\"getOwner()\":{\"return\":\"Address of the keep owner.\"},\"getPublicKey()\":{\"return\":\"Keep's ECDSA public key.\"},\"initialize(address,address[],uint256,uint256,uint256,address,address,address)\":{\"details\":\"We use clone factory to create new keep. That is why this contract doesn't have a constructor. We provide keep parameters for each instance function after cloning instances from the master contract.\",\"params\":{\"_honestThreshold\":\"Minimum number of honest keep members.\",\"_keepBonding\":\"Address of the KeepBonding contract.\",\"_keepFactory\":\"Address of the BondedECDSAKeepFactory that created this keep.\",\"_memberStake\":\"Stake required from each keep member.\",\"_members\":\"Addresses of the keep members.\",\"_owner\":\"Address of the keep owner.\",\"_stakeLockDuration\":\"Stake lock duration in seconds.\",\"_tokenStaking\":\"Address of the TokenStaking contract.\"}},\"isActive()\":{\"return\":\"true if the keep is active, false otherwise.\"},\"isAwaitingSignature(bytes32)\":{\"details\":\"Validates if the signing is currently in progress and compares provided digest with the one for which the latest signature was requested.\",\"params\":{\"_digest\":\"Digest for which to check if signature is being awaited.\"},\"return\":\"True if the digest is currently expected to be signed, else false.\"},\"isClosed()\":{\"return\":\"true if the keep is closed, false otherwise.\"},\"isTerminated()\":{\"return\":\"true if the keep has been terminated, false otherwise.\"},\"sign(bytes32)\":{\"details\":\"Only one signing process can be in progress at a time.\",\"params\":{\"_digest\":\"Digest to be signed.\"}},\"submitPublicKey(bytes)\":{\"details\":\"Public key is published successfully if all members submit the same value. In case of conflicts with others members submissions it will emit `ConflictingPublicKeySubmitted` event. When all submitted keys match it will store the key as keep's public key and emit a `PublicKeyPublished` event.\",\"params\":{\"_publicKey\":\"Signer's public key.\"}},\"submitSignature(bytes32,bytes32,uint8)\":{\"details\":\"Fails if signature has not been requested or a signature has already been submitted. Validates s value to ensure it's in the lower half of the secp256k1 curve's order.\",\"params\":{\"_r\":\"Calculated signature's R value.\",\"_recoveryID\":\"Calculated signature's recovery ID (one of {0, 1, 2, 3}).\",\"_s\":\"Calculated signature's S value.\"}},\"submitSignatureFraud(uint8,bytes32,bytes32,bytes32,bytes)\":{\"details\":\"The function expects the signed digest to be calculated as a sha256 hash of the preimage: `sha256(_preimage))`. The function reverts if the signature is not fraudulent. The function does not revert if KEEP slashing failed but emits an event instead. In practice, KEEP slashing should never fail.\",\"params\":{\"_preimage\":\"Preimage of the hashed message.\",\"_r\":\"R part of ECDSA signature.\",\"_s\":\"S part of ECDSA signature.\",\"_signedDigest\":\"Digest for the provided signature. Result of hashing the preimage with sha256.\",\"_v\":\"Signature's header byte: `27 + recoveryID`.\"},\"return\":\"True if fraud, error otherwise.\"},\"withdraw(address)\":{\"params\":{\"_member\":\"Keep member address.\"}}},\"title\":\"Bonded ECDSA Keep\"},\"userdoc\":{\"methods\":{\"checkBondAmount()\":{\"notice\":\"Returns the amount of the keep's ETH bond in wei.\"},\"checkSignatureFraud(uint8,bytes32,bytes32,bytes32,bytes)\":{\"notice\":\"Checks a fraud proof for a valid signature from this keep that was not first approved via a call to sign.\"},\"closeKeep()\":{\"notice\":\"Closes keep when owner decides that they no longer need it. Releases bonds to the keep members. Keep can be closed only when there is no signing in progress or requested signing process has timed out.\"},\"distributeERC20Reward(address,uint256)\":{\"notice\":\"Distributes ERC20 reward evenly across all keep signer beneficiaries.\"},\"distributeETHReward()\":{\"notice\":\"Distributes ETH reward evenly across all keep signer beneficiaries. If the value cannot be divided evenly across all signers, it sends the remainder to the last keep signer.\"},\"getMemberETHBalance(address)\":{\"notice\":\"Gets current amount of ETH hold in the keep for the member.\"},\"getMembers()\":{\"notice\":\"Returns members of the keep.\"},\"getOpenedTimestamp()\":{\"notice\":\"Gets the timestamp the keep was opened at.\"},\"getOwner()\":{\"notice\":\"Gets the owner of the keep.\"},\"getPublicKey()\":{\"notice\":\"Returns keep's ECDSA public key.\"},\"initialize(address,address[],uint256,uint256,uint256,address,address,address)\":{\"notice\":\"Initialization function.\"},\"isActive()\":{\"notice\":\"Returns true if the keep is active.\"},\"isAwaitingSignature(bytes32)\":{\"notice\":\"Checks if keep is currently awaiting a signature for the given digest.\"},\"isClosed()\":{\"notice\":\"Returns true if the keep is closed and members no longer support this keep.\"},\"isTerminated()\":{\"notice\":\"Returns true if the keep has been terminated. Keep is terminated when bonds are seized and members no longer support this keep.\"},\"returnPartialSignerBonds(uint256)\":{\"notice\":\"Returns partial signer's ETH bonds to the pool as an unbounded value. This function is called after bonds have been seized and processed by the privileged application after calling seizeSignerBonds function. It is entirely up to the application if a part of signers' bonds is returned. The application may decide for that but may also decide to seize bonds and do not return anything.\"},\"seizeSignerBonds()\":{\"notice\":\"Seizes the signers' ETH bonds. After seizing bonds keep is closed so it will no longer respond to signing requests. Bonds can be seized only when there is no signing in progress or requested signing process has timed out. This function seizes all of signers' bonds. The application may decide to return part of bonds later after they are processed using returnPartialSignerBonds function.\"},\"sign(bytes32)\":{\"notice\":\"Calculates a signature over provided digest by the keep.\"},\"submitPublicKey(bytes)\":{\"notice\":\"Submits a public key to the keep.\"},\"submitSignature(bytes32,bytes32,uint8)\":{\"notice\":\"Submits a signature calculated for the given digest.\"},\"submitSignatureFraud(uint8,bytes32,bytes32,bytes32,bytes)\":{\"notice\":\"Submits a fraud proof for a valid signature from this keep that was not first approved via a call to sign. If fraud is detected it tries to slash members' KEEP tokens. For each keep member tries slashing amount equal to the member stake set by the factory when keep was created.\"},\"withdraw(address)\":{\"notice\":\"Withdraws amount of ether hold in the keep for the member. The value is sent to the beneficiary of the specific member.\"}},\"notice\":\"ECDSA keep with additional signer bond requirement.\"}},\"settings\":{\"compilationTarget\":{\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/BondedECDSAKeep.sol\":\"BondedECDSAKeep\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/AbstractBondedECDSAKeep.sol\":{\"keccak256\":\"0xf30ee72199b66699bda3d0b543ecbea81f3c6f038d114653b0dff3ed965917af\",\"urls\":[\"bzz-raw://fc82178453c6503c722989f6d4f6d088f79e77845601893e1a2357d9b3b54e7b\",\"dweb:/ipfs/QmSbXo1w66Jw3TfbSenyJH7J7vKrrKnbQg2E3rDyQSSefK\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/AbstractBonding.sol\":{\"keccak256\":\"0xfa1dc6ce7275597b41bf827cbaccba02356221fd4582043f4202a564283a8c94\",\"urls\":[\"bzz-raw://1467ee58821e268916c01214a60ba89a6c1f86552b6804c03e6a24ff8c2324fa\",\"dweb:/ipfs/QmPWHY2yazh7XfTnYCEwZBvoAShK7vkjCXGikMeE9UCaaG\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/BondedECDSAKeep.sol\":{\"keccak256\":\"0x034a5dc5aafcde1958d66e687e0ffb459ee2e674afa088974f26a6a2ec203c61\",\"urls\":[\"bzz-raw://692686e7b6b9d673c5fcd2016fa027f60cf01f42888dc54761323a31fe5f62ec\",\"dweb:/ipfs/QmYdpb79ra3jiNaSEdoZhdQxcNY648ZbXd9QJGxGVeotDi\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/BondedECDSAKeepFactory.sol\":{\"keccak256\":\"0x8a2458db2682e68dd06cda051ca4a5e7da88940f8627f0e5ecd75684dfd167ce\",\"urls\":[\"bzz-raw://8d469b3b2e3200ce7c19df102e953149cc0dc8e19ebef198fd7ae30b352ca6ac\",\"dweb:/ipfs/QmfAaEMh7dZbK51jk4ANLcYKifazCoPoafs1ahxbeMCfhk\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/CandidatesPools.sol\":{\"keccak256\":\"0x8e7bdbebd3dfe16d075d516ea52cd8c9438a2e8a8fb7254a7f29a06ddd941fcc\",\"urls\":[\"bzz-raw://2cbd86e98e09ee38b70f1d5e2bf4fbec12755131b89640ebacdd2cb47072ced0\",\"dweb:/ipfs/QmTXj4eZmpfTQNMxfyiXsi6ge4RyUqBnNsv6QrF7xPQQ5A\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/CloneFactory.sol\":{\"keccak256\":\"0xc474d7a9994b783d28962cf9b22fa015563d2a94461af48b7e559439caf53ef1\",\"urls\":[\"bzz-raw://8fe135f81f3f4ab4e13c5a86c2a0853309d91918159b3533c0c483c889035243\",\"dweb:/ipfs/QmVg1wsXggXH4chee9HuwuwdUjaj75WHBrv17ESCjwAfJh\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/GroupSelectionSeed.sol\":{\"keccak256\":\"0x105193bb6372cd0928ee93e1e3325c1f083dc11517ffc1efbf6957943be85316\",\"urls\":[\"bzz-raw://54baf3a168f857eb1091fdeaac8457d725992ca434f1a3e56409136a9cd5c522\",\"dweb:/ipfs/QmT7R8JXJsKDXjK3ie54oEcPo7PD9ARHYWPJD6ZcxdwvZz\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/KeepBonding.sol\":{\"keccak256\":\"0x9d735436f51788923fdb965c03f74ff9781e91351998f8f6335cfcd0b5547c3a\",\"urls\":[\"bzz-raw://d013bde0b2aeb22fb561540c17dc99efe2ff0fef0bd1b60672dfcbcd78a68d9b\",\"dweb:/ipfs/QmeWWdKv6z7QXNpzHAnFwcUUPWAcDeYiL6T7VeHtPYCepr\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/KeepCreator.sol\":{\"keccak256\":\"0x0e0f7f07e0da6300e3f7ab54a04f657f6b639ca6d8ca173ed0c72ed984f9ff29\",\"urls\":[\"bzz-raw://c194e148dd7a9722840f191bccfd8bd0e587980e224d09ed75b763394ad706e3\",\"dweb:/ipfs/QmehudS123595jGdobFd5i54rH8fEKqT7ExBmsg9sBxXmC\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/api/IBondedECDSAKeep.sol\":{\"keccak256\":\"0x7ecd15b29cfe5da88d5b37e290fb9b49505e7dc49c311b76ab1ead34b2455eaf\",\"urls\":[\"bzz-raw://db6e10bf48ed6c451bc9fb43576f43f8bc2888bfba874eab58aed1bbe2dae7ce\",\"dweb:/ipfs/QmW9KhkuBLek9WhNnhc8CrX4N4msBndb9FQh2ypv71UDvs\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/api/IBondedECDSAKeepFactory.sol\":{\"keccak256\":\"0x07ae883d2a0f5b7fe2c0b055206f565da51b04d1ca574ae4d4da3a19e6badcdb\",\"urls\":[\"bzz-raw://038b4f5b45b2d676ef7411b69cadd490d5789e3d245afd78aaa72177ce042572\",\"dweb:/ipfs/QmRaBYU4HCDSH33a3gpLN4t2TsyNaFRxLKv3WeAZEgk9Rr\"]},\"/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/api/IBondingManagement.sol\":{\"keccak256\":\"0x00888f7edf918020ce70acf3ab6a17ff3d4b410a5413bf7ded1d3d5f21de1fb7\",\"urls\":[\"bzz-raw://a8e5989318021ed8866f03537c649c12fb75831859df5198028e5a4430494799\",\"dweb:/ipfs/QmWCPALgJvVfq3aveqEyRcquEckdeHFFbD7ATuraMAVaer\"]},\"@keep-network/keep-core/contracts/Authorizations.sol\":{\"keccak256\":\"0xd49b3840507c924cc37ac2da48bf1549013a79d84daf2cb106b4d4b9c6096e7a\",\"urls\":[\"bzz-raw://2b740d974564d027f9df04253f71ce2314839a682beac926b778e0f7ea59fbb5\",\"dweb:/ipfs/QmamRuiYLpt2fCUPrQypkvrf7BrCsdV12QgaSHQYPsJHT2\"]},\"@keep-network/keep-core/contracts/GrantStakingPolicy.sol\":{\"keccak256\":\"0x9d7604d5ccd4bf23b5aca39074183aabad98ce47bc74edd2023e7e0b1be6d1b5\",\"urls\":[\"bzz-raw://92fb21051ecfa9b9885b775c2cff1778cfbab3afe3b436e234a4f08181277983\",\"dweb:/ipfs/QmPxQUWpL6iFcydJxyFsZjmWRnxziPVA2rqrgwhn6F7Tfe\"]},\"@keep-network/keep-core/contracts/IRandomBeacon.sol\":{\"keccak256\":\"0x7582dc270725d9d15dbc2e13b263fa2f2c3164d9c2ac4a452b2a891a8285262a\",\"urls\":[\"bzz-raw://25cfc654326961065b23bd76da82b9c86354b30bf0b37d16c4734bdc3033b84d\",\"dweb:/ipfs/QmYvebB1arUVwod3speEHWZx6qZNaPuB94XhSFR6hPw8a6\"]},\"@keep-network/keep-core/contracts/KeepRegistry.sol\":{\"keccak256\":\"0x723cf0ade28c4158935e6c22f1da1ee98252ad1bc1cac30fe8fa462fe36ea886\",\"urls\":[\"bzz-raw://6244a0370c42ae7bac430e646694d64b80397e02209ae9ec1e01776e6b5a49fc\",\"dweb:/ipfs/QmcygjqGFv81ZpyKTUwdMRt1VdnM9H6pGUuKAP5YLmL5U8\"]},\"@keep-network/keep-core/contracts/KeepToken.sol\":{\"keccak256\":\"0x50defd2a00e356ed8eaf9aba405719f567c2da0164db5cdeadd68d155f6ded3b\",\"urls\":[\"bzz-raw://dbc8fb24f311c2dc95a26b1a1dfc9c7d93c634d32ef623fc23f799da5988fafb\",\"dweb:/ipfs/QmShZ3FtP2WUC9r1rbka8BWSf6oFkBbuxgxiDqhpwxo6zZ\"]},\"@keep-network/keep-core/contracts/ManagedGrant.sol\":{\"keccak256\":\"0x47f1cccc9f9c095b34ca514ae25cc467bbced15251b06f39896e0237e7fdec7c\",\"urls\":[\"bzz-raw://cad43bec15804ff17bd40fdee3598676f716b60204da9be163f15f45135ad250\",\"dweb:/ipfs/QmYHYEfR2UPZJZpsDhN2o1iD7drVSz8oqbYQFVT4G2oKqr\"]},\"@keep-network/keep-core/contracts/StakeDelegatable.sol\":{\"keccak256\":\"0xa1d81d17bc9f6bcc5878fb9b8acfdf7797c1561bf35111bac6bdbc3bba2c62aa\",\"urls\":[\"bzz-raw://deca3e5444cd9a5546818854009f9ac8c8e58479609de1a128ca73863f10ae7a\",\"dweb:/ipfs/QmcWYJkcHxsmCEhxRz6W5gSBgH597VYZgEaog9pzoLyZtt\"]},\"@keep-network/keep-core/contracts/TokenGrant.sol\":{\"keccak256\":\"0xad97f1a667f3be66dc6904fb7925e940ca57e4c88d38ae960672d95d7911bf6f\",\"urls\":[\"bzz-raw://f3f6b377ddcc2ad2b47811f115c20bdf6a6a208066afaebe027ac4eb165ca231\",\"dweb:/ipfs/QmXNSkqCDoBS1KGQbQ3PqXr1iMPgkPNWLcEKiBrV8u5LeW\"]},\"@keep-network/keep-core/contracts/TokenGrantStake.sol\":{\"keccak256\":\"0x014bbb7f336388024480415391cad745ec52cd255cd2740c890948246ab4d524\",\"urls\":[\"bzz-raw://745d488e7271fe9c71879c09fd09eb96b2193346adfddbb59638b80610707be3\",\"dweb:/ipfs/QmR3DyUzhTjE971QovXxMchRkUD3eHUj5S73Eahrf2Wyw8\"]},\"@keep-network/keep-core/contracts/TokenSender.sol\":{\"keccak256\":\"0xe50a3a7d2f30e8801d8b608c462f65c868e17ff8b2f0db3448876adf0f288117\",\"urls\":[\"bzz-raw://f040546b183d26a9e26adfc01a6425eb6bce1cec1ab5b142aa360c8096ede385\",\"dweb:/ipfs/QmdRa8huRUmsTTvwnWPBF7V2gTQAGsGn3VFUeBfbisBszw\"]},\"@keep-network/keep-core/contracts/TokenStaking.sol\":{\"keccak256\":\"0x957a8b500117fd8c74466e9c2cfd13e295e5cd66107bda1e5fdea1871248d0e8\",\"urls\":[\"bzz-raw://c6cca24bbf724e77009cb683d1715b8ffb1faa7ad2089156d6fc8d600a397fd4\",\"dweb:/ipfs/QmeVnKTgFhfVSfEgCcoFD86MfGUB9FTD8cbi5SxX2Vmy67\"]},\"@keep-network/keep-core/contracts/TokenStakingEscrow.sol\":{\"keccak256\":\"0x152a565d564bee09ea3f0f363c912fe3361966bf8d60f14ebcb8bf593d3b140e\",\"urls\":[\"bzz-raw://78ffe4daadcfeacc49c45c4e9879f62c2df3bdd00587b033492ee901537976f1\",\"dweb:/ipfs/QmPwmSu4XF7KpHnC6bqBTkrkjA6CUnC8h5PML9DqkAzLW8\"]},\"@keep-network/keep-core/contracts/libraries/RolesLookup.sol\":{\"keccak256\":\"0x4622ccfb359f6478d3e87fb99f755dcebde1b5040662f3572ab8c8d50d2f8bc0\",\"urls\":[\"bzz-raw://cee3570c755b0a30412af08ce4663f85078b10a0eccf6808bec125897c7ead8e\",\"dweb:/ipfs/Qmc9EAjLfBYXfhtd24uNFzu1XKrPaqS5ismF4ZGsPyiBuU\"]},\"@keep-network/keep-core/contracts/libraries/grant/UnlockingSchedule.sol\":{\"keccak256\":\"0x26f8fe158e3f661bc54fc42a50a1686ef92dd18316a03592bafa2db6a2af9c3f\",\"urls\":[\"bzz-raw://718b4a48d7a50c151328cd15e91e9b9b4cba0db7f7b6b06533709614f9811a55\",\"dweb:/ipfs/QmYyTN6cLZiWumwE6jt2yDHNtc6DMCXaEntgKAN3zqp8yX\"]},\"@keep-network/keep-core/contracts/libraries/staking/GrantStaking.sol\":{\"keccak256\":\"0x96253ba2eb78b83a04dd48f0a7ff6083ca72d6e4a27dec0888959c1b3b0be9aa\",\"urls\":[\"bzz-raw://a2ad3ddeba9de2f24b1c1c0339baf52a0b0446248ddfc0554d8fb71ce2057c0f\",\"dweb:/ipfs/QmdYxpcxm8TG7i3qYswudhxvff8hnARSR1GsVcY2fjUpzh\"]},\"@keep-network/keep-core/contracts/libraries/staking/LockUtils.sol\":{\"keccak256\":\"0x0fbd9a4d82cf8803f00cb59cca9580d379c8d98a759b8a6d74f75f01c19fc635\",\"urls\":[\"bzz-raw://f2df931f0a11d4f63aa1f6193419606711a24ce7381dd15db52419c783dc7952\",\"dweb:/ipfs/QmRMGWSbfYPaxppBb7w2cQHpAwDc4T9MBmpZqU396i8hKK\"]},\"@keep-network/keep-core/contracts/libraries/staking/Locks.sol\":{\"keccak256\":\"0xf45306074f9e893646c21e53954891e29c8011887545d8bbbcab7ef74558b18a\",\"urls\":[\"bzz-raw://971d3c54afde9050e455e79ec42b28d86a101bec8afab30e22b1fa4bfc110cc4\",\"dweb:/ipfs/QmfGTvrbc8dJXaxsxAmZM6oU8AvP5V6C2PQ5JF3gCJC81m\"]},\"@keep-network/keep-core/contracts/libraries/staking/MinimumStakeSchedule.sol\":{\"keccak256\":\"0x31a399a918eba21f0002019a70b1b68c9610a5a4977fcd874b86d4965eb974c3\",\"urls\":[\"bzz-raw://acbe55a89d5e6f7b6d4add0764e7b47acbdc31afc0d5b1f211b45546d3a5cd6c\",\"dweb:/ipfs/QmcXSUaLV7d117ZvyMnRB3MVXVEGy62ccB5u6d8h1Sm792\"]},\"@keep-network/keep-core/contracts/libraries/staking/TopUps.sol\":{\"keccak256\":\"0xe3a3c8d5e542f4f8ac8fdab92de57081257e1c07288e0e592cfc27551085e07f\",\"urls\":[\"bzz-raw://4cffa006da7f76868bcca1d107be436f3cd83339ff76df79c3e92a029e7ad66a\",\"dweb:/ipfs/QmZ5AArQ3gKBeXqGwGnSH45BQZQpGvjuQ4LnNaarrLrdy5\"]},\"@keep-network/keep-core/contracts/utils/AddressArrayUtils.sol\":{\"keccak256\":\"0xfb546b43ffd00d565d8440b6d221f5f046222e95469e33044665a56e79fcde48\",\"urls\":[\"bzz-raw://1f947ef8956e26d564cffd73a4f0dcdb02db1d7a46774d4e8876328116f6b663\",\"dweb:/ipfs/QmYUpg3JhhkogsY5nnjyMg6TEwoqRzTkJAWdhQGSbYqMH3\"]},\"@keep-network/keep-core/contracts/utils/BytesLib.sol\":{\"keccak256\":\"0xf5c726e1c77dea37b9ea1edd9bc7b4eebfafe33ce766a2607eb37d7144e4d68c\",\"urls\":[\"bzz-raw://32f61bad1923d749aff36ad9f62929e603ed27832348ba58d44d01561339d761\",\"dweb:/ipfs/QmWvfwapwUr9SnnEWXdmpo4r2TtVPFJFSUBXKJQpLZkYp1\"]},\"@keep-network/keep-core/contracts/utils/OperatorParams.sol\":{\"keccak256\":\"0xc13cbf7a6ad4740a8ad6373229b20b66eb4cc3d7aa9870161765ab8197513ab7\",\"urls\":[\"bzz-raw://e8343bc058fcee610863777792a25608549d80e126a05d076481dedb48587565\",\"dweb:/ipfs/QmR8ztc4StcK4yw7QmXj2b9TtS3Qs1BERrqDLtPZmUiffS\"]},\"@keep-network/keep-core/contracts/utils/PercentUtils.sol\":{\"keccak256\":\"0x696b15997a739e6c47c5bc29e1f9023998bb188405221a6b337377bca4ab3f68\",\"urls\":[\"bzz-raw://e93e2287fe6b6e1c5cc45ebc92b9d682e19a5b1302e00cb037391da753282bbf\",\"dweb:/ipfs/QmRXmEopRWNaL7mvY5nTyNNob3EPHF67R6Nxhm3F4VsDoo\"]},\"@keep-network/sortition-pools/contracts/AbstractSortitionPool.sol\":{\"keccak256\":\"0xe4b8c582f8ab1384e6ebd7acd2865bb95cc920bd945bb79f1ffa4ab5faf68a43\",\"urls\":[\"bzz-raw://6db8b7341834487a51359e8905e217a6c5a2a4b57af256c8432bc4df88c68798\",\"dweb:/ipfs/Qmf8JFkxJUiMxSkFfSr8KuFce6rLcQhggLrXQAgdn8Wrfj\"]},\"@keep-network/sortition-pools/contracts/BondedSortitionPool.sol\":{\"keccak256\":\"0xbae24009aa6ca4eae00c43632fe039b6349698949e6833b03b78e15c518d3609\",\"urls\":[\"bzz-raw://aa9b88974dd10438b46dede91e167bb74a63338733bd7a745988e892aa459046\",\"dweb:/ipfs/QmYwoXXLW3NmsBha2FhBLrqCmMGZXpUvepZaJ3xRcTNJW2\"]},\"@keep-network/sortition-pools/contracts/BondedSortitionPoolFactory.sol\":{\"keccak256\":\"0x975fc72c7a883b2619cd60cdb295fdb694475fb14ab28e815808d26f69073417\",\"urls\":[\"bzz-raw://6493092041775c8dba5c944bf22c8e2349a9a7e7aa700c77dbe7ca7449f18d9a\",\"dweb:/ipfs/QmbNKytR1wts8ZPcbD9sd399kcqbxLtdR39Xn3cKWhRPNp\"]},\"@keep-network/sortition-pools/contracts/Branch.sol\":{\"keccak256\":\"0x5a25a20ada831bae7d18c81b5c5064237d62b6c85dc5058f2026b4e7f54b764b\",\"urls\":[\"bzz-raw://59a54e0720c7ad0f901d9ca1c8109557b73a53102078622cbe18bdeee0bb0130\",\"dweb:/ipfs/QmZsbANSbvEAz52Je5Nj9zg6v8eqUKxfhPM2RbbpfWrjcd\"]},\"@keep-network/sortition-pools/contracts/DynamicArray.sol\":{\"keccak256\":\"0x066ce3500e921ac158f43fa03fcf4db7972d2e822fb0a4837047a46cea955838\",\"urls\":[\"bzz-raw://01dbda706114d3fc665c8f0e66b55ffb7d7e5ac07b080941c3aa269fe77950a5\",\"dweb:/ipfs/QmZYJggQVRX9JGrjrrEwGfagXYa36GkGxqTYcFGts7XBpe\"]},\"@keep-network/sortition-pools/contracts/GasStation.sol\":{\"keccak256\":\"0x7d308db5dc6172a6921b9a85876f8d1bcff7bab312c48c7622c40ce125cbbde5\",\"urls\":[\"bzz-raw://603855f1e71fb4a494ecb752d7c5056be58b541eae45f77ff823c96624b2191b\",\"dweb:/ipfs/QmXYdmDBdsfWAxQEjeZN3sJ6HfaeBH5BJ4YZvhVz8Nns3b\"]},\"@keep-network/sortition-pools/contracts/Interval.sol\":{\"keccak256\":\"0x2f6427bc88a1394183267371d010902cbc4881f446e8331362800d6858167138\",\"urls\":[\"bzz-raw://da900040f884c3fcdf45bb5176a6717428c69572feb3a58e512a870a0b9f3abf\",\"dweb:/ipfs/QmaJetk4AUDAfPaocX5nxAfgpnAccRFaYUEHXBXKPjkHZR\"]},\"@keep-network/sortition-pools/contracts/Leaf.sol\":{\"keccak256\":\"0xed4661ae7b2946d79e102ae0465905ac73818387647ea7c531d99c5848208af2\",\"urls\":[\"bzz-raw://699f16bffd042beaf313a99d50fe2e2271303798fb23c8d91555c86f97df39ab\",\"dweb:/ipfs/QmYhxivxadGS2TCFXSq3XDZkHmbLagbwi66mKup3KBSWbg\"]},\"@keep-network/sortition-pools/contracts/Position.sol\":{\"keccak256\":\"0x0240fd41cc284d8ebfada3433920dea826dac5d9e3b2d31d43c808bc24b0611b\",\"urls\":[\"bzz-raw://2901fcbfa2f21a1a81c78f40c2172ac15676303ab1357396a04d965224ca67e9\",\"dweb:/ipfs/QmcDa2o51QWZWZCvxTLNMV1mfe3iuANDwmzaZrDpV8Ke8V\"]},\"@keep-network/sortition-pools/contracts/RNG.sol\":{\"keccak256\":\"0x5bf17e705f2e5c082567bdc5d1b352e3fafc0a170f19f0d0f53e0c4655b1980a\",\"urls\":[\"bzz-raw://3db885c8c7856ac8d122c208912ba045abb380574678df6584f4f63329f3ea53\",\"dweb:/ipfs/QmXKWpJkhaeW6RNDY3ABAVvRR7eUTvhJxytufSkTkWLgHx\"]},\"@keep-network/sortition-pools/contracts/SortitionTree.sol\":{\"keccak256\":\"0x03a7f50efc5148f155b935106c869c0f1ebacc9e0ab09a2461a404e2b12b8053\",\"urls\":[\"bzz-raw://2b4a02be0ad34b14125c208e6ce4d7971490af24d156ca7e663bf2f1505eacc9\",\"dweb:/ipfs/QmXiZjTqzKTPkMPqFNoPYeRo5p1rUyB6kCRiFBt89xAsHw\"]},\"@keep-network/sortition-pools/contracts/StackLib.sol\":{\"keccak256\":\"0xff1cb7ce8eee34d1bcd841136088c955d61bb90d465407d5801e1ffd2f4f2c78\",\"urls\":[\"bzz-raw://f7e5586e5027b7948960ac2baca141794e2e8ca7644fc7033032adc4aee96e38\",\"dweb:/ipfs/QmXqfRHKEXH2tUy8QqAzrwtesrnR5nmi7acv4NLsng2ujL\"]},\"@keep-network/sortition-pools/contracts/api/IBonding.sol\":{\"keccak256\":\"0xe62ea5302af749042e419ad1643f0e9788bbbefe82a5c5d0b3e77a4a5a4b241e\",\"urls\":[\"bzz-raw://3ac748582f07716200c2f500aee47a8c2a79c1144fe3454e112290906cb3dfbf\",\"dweb:/ipfs/QmdNqK1V25QB1asWyWJfsSAVxorTjBp8DXG5eXw71e31rM\"]},\"@keep-network/sortition-pools/contracts/api/IStaking.sol\":{\"keccak256\":\"0xf7cc15fb64346774c97f93b7f626d7adcf5a288377f44048906d93511c5ca3cd\",\"urls\":[\"bzz-raw://f9a04f30cad1f821488043c255ee5516c0d84645596f0a9b90fc4a90a03943ce\",\"dweb:/ipfs/QmPaoiRZfA1NpzHVT69sV79ygeXGEx1ZZ3rGdmV2Gvymv3\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x4ccf2d7b51873db1ccfd54ca2adae5eac3b184f9699911ed4490438419f1c690\",\"urls\":[\"bzz-raw://d62d769b2219d5de39013093412623e624fa887f871826ea3bae6052ee893610\",\"dweb:/ipfs/QmV3yVktya1s617QmuzQR2CfuJgUi3dR2xEZY9ecmqZ2G1\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0xf79fb10e8235770eb4aea7249034076a3cc9f9119ad944fc48705bae9c9d20dc\",\"urls\":[\"bzz-raw://cd3429aa9a4878dcf6c73faa32c3722f4013d4be012ece543b246faa6b50f55c\",\"dweb:/ipfs/QmS55hgTvNEAKinus19m65CB4wcymN8EiUPFpRx5tYJ1i2\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x852793a3c2f86d336a683b30d688ec3dcfc57451af5a2bf5975cda3b7191a901\",\"urls\":[\"bzz-raw://4f5b57664069671648fb81f55b0082faecdf1b2f159eec6b1fa6cef9b7d73bc5\",\"dweb:/ipfs/QmcyytaLs7zFdb4Uu7C5PmQRhQdB3wA3fUdkV6mkYfdDFH\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\":{\"keccak256\":\"0xa5ebf3344a36eb60e723e0764d85251c496e15e4b2d737b56415502b559a1765\",\"urls\":[\"bzz-raw://c543fd1fc299b7d32c658c86118ff2d0e7897a7c8b9d5f576fe6c0271c28961b\",\"dweb:/ipfs/QmNMrjLnsC4JP54aXLHhpra5NPTAs8rrd2bgXfYYYdJMhS\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\":{\"keccak256\":\"0xc61b3603089b09a730d8ca72e9133a496cc4405da40e9b87c12f073245d774bf\",\"urls\":[\"bzz-raw://de8bb0003d53de236913f0e0102e7a9d015e02098f2495edd000f207fe2be2f4\",\"dweb:/ipfs/QmbtwNwAJEehWWL7yGGyyMoenQvcqtz91pqLgQPpLRoLYC\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzz-raw://d0abb99bb8bfc2bc0a89902b8ed1dc0442ad08cc78cee64c291b3df6a27bcccc\",\"dweb:/ipfs/QmP5NaEwZthQeM2ESz4WTT3osrP7jhbvu7ocbttBi2JAw6\"]},\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0xf6f89424e17870561dc23c5933c55c5726b66a68d51ad2a2c00c569a5f02f507\",\"urls\":[\"bzz-raw://005657a7ffbf6d12726ac0167b55be965dc473d43f061b605f883a54cc00ab4f\",\"dweb:/ipfs/QmaBzyvDQyNnn6DXQYewEtN9Go85orikSnW9PwNWqUGPEX\"]},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"keccak256\":\"0xf3358e5819ca73357abd6c90bdfffd0474af54364897f6b3e3234c4b71fbe9a1\",\"urls\":[\"bzz-raw://75ae8d04454d1511a2ed986cc8585736f05c5c25280683b3d24712a9f414a4bf\",\"dweb:/ipfs/Qmb3kNCoBUZdah1AgBBD4zMk898j5Qw8ahT1w5cCMYp5Y3\"]},\"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x0441ff2b36d503f3a29d28d3754291f119064f4973d5c780698143d919037a78\",\"urls\":[\"bzz-raw://af27dd68d2371e68c8ed8cf297ec6d832bf906742d53367b70399ba918060cb7\",\"dweb:/ipfs/QmcMMjZceFepXgRrzSx577oWwt7SCSFzoqZiTF7tTxquF7\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506146ab806100206000396000f3fe6080604052600436106101cd5760003560e01c8063893d20e8116100f7578063c36bc45611610095578063d5cc8b0f11610064578063d5cc8b0f14610b2f578063dc3d6da814610b94578063f15d1a9014610bbf578063f4c2b4c114610c88576101cd565b8063c36bc45614610a47578063c9de240d14610a82578063cb7cf18714610aad578063d1cc997614610b00576101cd565b8063a15c3bbb116100d1578063a15c3bbb14610870578063abd14f3714610887578063bf9c83011461090d578063c2b6b58c14610a18576101cd565b8063893d20e8146107565780638da5cb5b146107ad5780639eab525314610804576101cd565b806352a82b651161016f5780636806db1f1161013e5780636806db1f1461053a578063799cd3331461056557806379a80491146105a05780637df2b35714610704576101cd565b806352a82b65146103a95780635a89f810146103d45780635daf08ca1461042f57806363ffab31146104aa576101cd565b806322f3e2d4116101ab57806322f3e2d41461028f5780632930e170146102be5780632e334452146102c857806351cff8d914610358576101cd565b806301ac4293146101d257806307acd5cb146102215780631133fd2c14610238575b600080fd5b3480156101de57600080fd5b5061020b600480360360208110156101f557600080fd5b8101908080359060200190929190505050610cb3565b6040518082815260200191505060405180910390f35b34801561022d57600080fd5b50610236610ccb565b005b34801561024457600080fd5b5061024d611105565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029b57600080fd5b506102a461112b565b604051808215151515815260200191505060405180910390f35b6102c661115a565b005b3480156102d457600080fd5b506102dd611388565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031d578082015181840152602081019050610302565b50505050905090810190601f16801561034a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036457600080fd5b506103a76004803603602081101561037b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061142a565b005b3480156103b557600080fd5b506103be611612565b6040518082815260200191505060405180910390f35b3480156103e057600080fd5b5061042d600480360360408110156103f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611618565b005b34801561043b57600080fd5b506104686004803603602081101561045257600080fd5b8101908080359060200190929190505050611835565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b657600080fd5b506104bf611871565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ff5780820151818401526020810190506104e4565b50505050905090810190601f16801561052c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561054657600080fd5b5061054f61190f565b6040518082815260200191505060405180910390f35b34801561057157600080fd5b5061059e6004803603602081101561058857600080fd5b8101908080359060200190929190505050611915565b005b3480156105ac57600080fd5b5061070260048036036101008110156105c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561060157600080fd5b82018360208201111561061357600080fd5b8035906020019184602083028401116401000000008311171561063557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611baf565b005b34801561071057600080fd5b506107546004803603606081101561072757600080fd5b810190808035906020019092919080359060200190929190803560ff169060200190929190505050611d56565b005b34801561076257600080fd5b5061076b6121c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107b957600080fd5b506107c26121ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561081057600080fd5b50610819612212565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561085c578082015181840152602081019050610841565b505050509050019250505060405180910390f35b34801561087c57600080fd5b506108856122a0565b005b34801561089357600080fd5b5061090b600480360360208110156108aa57600080fd5b81019080803590602001906401000000008111156108c757600080fd5b8201836020820111156108d957600080fd5b803590602001918460018302840111640100000000831117156108fb57600080fd5b90919293919293905050506123ee565b005b34801561091957600080fd5b506109fe600480360360a081101561093057600080fd5b81019080803560ff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561097857600080fd5b82018360208201111561098a57600080fd5b803590602001918460018302840111640100000000831117156109ac57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061296e565b604051808215151515815260200191505060405180910390f35b348015610a2457600080fd5b50610a2d612c5e565b604051808215151515815260200191505060405180910390f35b348015610a5357600080fd5b50610a8060048036036020811015610a6a57600080fd5b8101908080359060200190929190505050612c8e565b005b348015610a8e57600080fd5b50610a97612fb9565b6040518082815260200191505060405180910390f35b348015610ab957600080fd5b50610ae660048036036020811015610ad057600080fd5b8101908080359060200190929190505050612fbf565b604051808215151515815260200191505060405180910390f35b348015610b0c57600080fd5b50610b15612fdd565b604051808215151515815260200191505060405180910390f35b348015610b3b57600080fd5b50610b7e60048036036020811015610b5257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061300c565b6040518082815260200191505060405180910390f35b348015610ba057600080fd5b50610ba9613055565b6040518082815260200191505060405180910390f35b348015610bcb57600080fd5b50610c6e600480360360a0811015610be257600080fd5b81019080803560ff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610c2a57600080fd5b820183602082011115610c3c57600080fd5b80359060200191846001830284011164010000000083111715610c5e57600080fd5b90919293919293905050506131eb565b604051808215151515815260200191505060405180910390f35b348015610c9457600080fd5b50610c9d6133bf565b6040518082815260200191505060405180910390f35b60066020528060005260406000206000915090505481565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f7420746865206b656570206f776e65720000000081525060200191505060405180910390fd5b610d9561112b565b610e07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b610e0f6133c9565b60008090505b600280549050811015611102576000600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663446f0f9e60028481548110610e6f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16303073ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d6020811015610f7657600080fd5b81019080805190602001909291905050509050600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cb0a67760028481548110610fd457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16846000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050600060405180830381600087803b1580156110dc57600080fd5b505af11580156110f0573d6000803e3d6000fd5b50505050508080600101915050610e15565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600281111561113957fe5b600c60009054906101000a900460ff16600281111561115457fe5b14905090565b60006002805490509050600061117982346133db90919063ffffffff16565b9050600081116111f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4469766964656e642076616c7565206d757374206265206e6f6e2d7a65726f0081525060200191505060405180910390fd5b60008090505b600183038161ffff16101561129b5781600a600060028461ffff168154811061121c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080806001019150506111f7565b5060006112b1833461346a90919063ffffffff16565b90506112c681836134f490919063ffffffff16565b600a6000600260018703815481106112da57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fa9e4160b29b5c7db7fa61c512c4b45e7c3451c3331537f065a3417778cea5096346040518082815260200191505060405180910390a1505050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114205780601f106113f557610100808354040283529160200191611420565b820191906000526020600020905b81548152906001019060200180831161140357829003601f168201915b5050505050905090565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f2066756e647320746f20776974686472617700000000000000000000000081525060200191505060405180910390fd5b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006115348361357c565b73ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d8060008114611591576040519150601f19603f3d011682016040523d82523d6000602084013e611596565b606091505b505090508061160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b505050565b60055481565b600082905060006002805490509050600061163c82856133db90919063ffffffff16565b9050600081116116b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4469766964656e642076616c7565206d757374206265206e6f6e2d7a65726f0081525060200191505060405180910390fd5b60008090505b600183038161ffff161015611746576117393361171160028461ffff16815481106116e157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661357c565b848773ffffffffffffffffffffffffffffffffffffffff1661365f909392919063ffffffff16565b80806001019150506116ba565b50600061175c838661346a90919063ffffffff16565b90506117df336117a56002600187038154811061177557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661357c565b6117b884866134f490919063ffffffff16565b8773ffffffffffffffffffffffffffffffffffffffff1661365f909392919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff167fb69f5873bb2e9e1cc495d5c23d2995010c3b5cdd1756e3cada2bc3f2150902cc866040518082815260200191505060405180910390a2505050505050565b6002818154811061184257fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119075780601f106118dc57610100808354040283529160200191611907565b820191906000526020600020905b8154815290600101906020018083116118ea57829003601f168201915b505050505081565b60035481565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146119d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f7420746865206b656570206f776e65720000000081525060200191505060405180910390fd5b6119df61112b565b611a51576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b600060048054600181600116156101000203166002900490501415611ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5075626c6963206b657920776173206e6f74207365742079657400000000000081525060200191505060405180910390fd5b611ae6613765565b15611b59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5369676e6572206973206275737900000000000000000000000000000000000081525060200191505060405180910390fd5b4260088190555043600660008381526020019081526020016000208190555080600581905550807f34f611bedd4f8c135323bbfc4921e3f6e4feb7eef591036eed6af5462e6cfab060405160405180910390a250565b60008173ffffffffffffffffffffffffffffffffffffffff16631133fd2c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf757600080fd5b505afa158015611c0b573d6000803e3d6000fd5b505050506040513d6020811015611c2157600080fd5b81019080805190602001909291905050509050611c418989898685613772565b85600d8190555083600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a590ae36836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611d2a57600080fd5b505af1158015611d3e573d6000803e3d6000fd5b50505050611d4b85613922565b505050505050505050565b611def336002805480602002602001604051908101604052809291908181526020018280548015611ddc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d92575b5050505050613a3e90919063ffffffff16565b611e61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f7420746865206b656570206d656d62657200000081525060200191505060405180910390fd5b611e69613765565b611edb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4e6f74206177616974696e672061207369676e6174757265000000000000000081525060200191505060405180910390fd5b60048160ff1610611f37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806145b66027913960400191505060405180910390fd5b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115611fb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604c815260200180614601604c913960600191505060405180910390fd5b600081601b019050600160055482868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561201a573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff166120dd60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120d35780601f106120a8576101008083540402835291602001916120d3565b820191906000526020600020905b8154815290600101906020018083116120b657829003601f168201915b5050505050613ab9565b73ffffffffffffffffffffffffffffffffffffffff1614612166576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c6964207369676e617475726500000000000000000000000000000081525060200191505060405180910390fd5b60006008819055506005547fb19546e9e0b503d103dd4ae295f4d526e9115adf7c902ead329b1f2404efd35f858585604051808481526020018381526020018260ff1660ff168152602001935050505060405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600280548060200260200160405190810160405280929190818152602001828054801561229657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161224c575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f7420746865206b656570206f776e65720000000081525060200191505060405180910390fd5b61236a61112b565b6123dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b6123e4613acd565b6123ec613c1b565b565b61248733600280548060200260200160405190810160405280929190818152602001828054801561247457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161242a575b5050505050613a3e90919063ffffffff16565b6124f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f7420746865206b656570206d656d62657200000081525060200191505060405180910390fd5b61250233613d2e565b15612558576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806145916025913960400191505060405180910390fd5b604082829050146125d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5075626c6963206b6579206d757374206265203634206279746573206c6f6e6781525060200191505060405180910390fd5b8181600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020919061261f9291906143e6565b50600080905060008090505b6002805490508110156128e05783836040518083838082843780830192505050925050506040518091039020600960006002848154811061266857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180828054600181600116156101000203166002900480156127285780601f10612706576101008083540402835291820191612728565b820191906000526020600020905b815481529060010190602001808311612714575b50509150506040518091039020146128ca5761277a6002828154811061274a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613d2e565b156128c5573373ffffffffffffffffffffffffffffffffffffffff167f99d98e35ad6445ac964c46a75c7f748e8f390ebdca5a924cd8f92d674fa34ff760096000600285815481106127c857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156128b65780601f1061288b576101008083540402835291602001916128b6565b820191906000526020600020905b81548152906001019060200180831161289957829003601f168201915b50509250505060405180910390a25b6128d3565b81806001019250505b808060010191505061262b565b5060028054905081146128f3575061296a565b8282600491906129049291906143e6565b507ff62bba8b270bef3e8d0fcebc1f86567664da8ccbd03e8509d6231cc8d63f4b31838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a1505b5050565b600080600480546001816001161561010002031660029004905014156129fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5075626c6963206b657920776173206e6f74207365742079657400000000000081525060200191505060405180910390fd5b60006002836040518082805190602001908083835b60208310612a345780518252602082019150602081019050602083039250612a11565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015612a76573d6000803e3d6000fd5b5050506040513d6020811015612a8b57600080fd5b81019080805190602001909291905050509050808414612af6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806145596038913960400191505060405180910390fd5b600060018589898960405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612b55573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16612c1860048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c0e5780601f10612be357610100808354040283529160200191612c0e565b820191906000526020600020905b815481529060010190602001808311612bf157829003601f168201915b5050505050613ab9565b73ffffffffffffffffffffffffffffffffffffffff16149050808015612c51575060006006600087815260200190815260200160002054145b9250505095945050505050565b600060016002811115612c6d57fe5b600c60009054906101000a900460ff166002811115612c8857fe5b14905090565b600060028054905090506000612cad82846133db90919063ffffffff16565b905060008111612d08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806145dd6024913960400191505060405180910390fd5b60008090505b600183038161ffff161015612e5a57600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8820f6c60028361ffff1681548110612d6c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684336040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015612e3557600080fd5b505af1158015612e49573d6000803e3d6000fd5b505050508080600101915050612d0e565b506000612e70838561346a90919063ffffffff16565b9050600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8820f6c60026001860381548110612ec057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612efe84866134f490919063ffffffff16565b336040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015612f9b57600080fd5b505af1158015612faf573d6000803e3d6000fd5b5050505050505050565b600d5481565b6000612fc9613765565b8015612fd6575081600554145b9050919050565b6000600280811115612feb57fe5b600c60009054906101000a900460ff16600281111561300657fe5b14905090565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000905060008090505b6002805490508110156131e357600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663446f0f9e600283815481106130ba57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16303073ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561319757600080fd5b505afa1580156131ab573d6000803e3d6000fd5b505050506040513d60208110156131c157600080fd5b8101908080519060200190929190505050820191508080600101915050613062565b508091505090565b60006131f561112b565b613267576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b60006132ba8888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061296e565b90508061332f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5369676e6174757265206973206e6f74206672617564756c656e74000000000081525060200191505060405180910390fd5b600b8484604051808383808284378083019250505092505050908152602001604051809103902060009054906101000a900460ff166133b157613370613d8e565b6001600b8585604051808383808284378083019250505092505050908152602001604051809103902060006101000a81548160ff0219169083151502179055505b809150509695505050505050565b6000600754905090565b6133d1613fa9565b6133d9613c1b565b565b6000808211613452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b600082848161345d57fe5b0490508091505092915050565b6000808214156134e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f536166654d6174683a206d6f64756c6f206279207a65726f000000000000000081525060200191505060405180910390fd5b8183816134eb57fe5b06905092915050565b600080828401905083811015613572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba7bffd3836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561361d57600080fd5b505afa158015613631573d6000803e3d6000fd5b505050506040513d602081101561364757600080fd5b81019080805190602001909291905050509050919050565b61375f848573ffffffffffffffffffffffffffffffffffffffff166323b872dd905060e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613fb3565b50505050565b6000806008541415905090565b600c60159054906101000a900460ff16156137f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f436f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836002908051906020019061384b929190614466565b508260038190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600c60006101000a81548160ff021916908360028111156138b357fe5b02179055506001600c60156101000a81548160ff0219169083151502179055504260078190555081600c60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60008090505b600280549050811015613a3a57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e1625e6002838154811061398057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613a1557600080fd5b505af1158015613a29573d6000803e3d6000fd5b505050508080600101915050613928565b5050565b600080600090505b8351811015613aad57838181518110613a5b57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613aa0576001915050613ab3565b8080600101915050613a46565b50600090505b92915050565b6000818051906020012060001c9050919050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613b8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f7420746865206b656570206f776e65720000000081525060200191505060405180910390fd5b613b9761112b565b613c09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b613c116141fe565b613c19614250565b565b60008090505b600280549050811015613d2b57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a1ce59960028381548110613c7957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015613d0657600080fd5b505af1158015613d1a573d6000803e3d6000fd5b505050508080600101915050613c21565b50565b600080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546001816001161561010002031660029004905014159050919050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600d54600260405160240180838152602001806020018281038252838181548152602001915080548015613e5257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613e08575b505093505050506040516020818303038152906040527f8e49aa7a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310613f095780518252602082019150602081019050602083039250613ee6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613f6b576040519150601f19603f3d011682016040523d82523d6000602084013e613f70565b606091505b5050905080613fa6577f9caa8d499152520a1b3e11b41d51a51e5d1699294ebccdb9de0faa824dba8aae60405160405180910390a15b50565b613fb1614381565b565b613fd28273ffffffffffffffffffffffffffffffffffffffff166143d3565b614044576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106140935780518252602082019150602081019050602083039250614070565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146140f5576040519150601f19603f3d011682016040523d82523d6000602084013e6140fa565b606091505b509150915081614172576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b6000815111156141f85780806020019051602081101561419157600080fd5b81019080805190602001909291905050506141f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061464d602a913960400191505060405180910390fd5b5b50505050565b6001600c60006101000a81548160ff0219169083600281111561421d57fe5b02179055507f400fd7ee62b209afddce9dfbca204b2124c135597dff0ac92e9844e2b08927f660405160405180910390a1565b60008090505b60028054905081101561437e57600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ab3cf93600283815481106142ae57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561435957600080fd5b505af115801561436d573d6000803e3d6000fd5b505050508080600101915050614256565b50565b6002600c60006101000a81548160ff021916908360028111156143a057fe5b02179055507f39f530c1293a870138e53618b826819a76f1fe86b5d500ba4622f9e8354a846a60405160405180910390a1565b600080823b905060008111915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061442757803560ff1916838001178555614455565b82800160010185558215614455579182015b82811115614454578235825591602001919060010190614439565b5b50905061446291906144f0565b5090565b8280548282559060005260206000209081019282156144df579160200282015b828111156144de5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190614486565b5b5090506144ec9190614515565b5090565b61451291905b8082111561450e5760008160009055506001016144f6565b5090565b90565b61455591905b8082111561455157600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010161451b565b5090565b9056fe5369676e65642064696765737420646f6573206e6f74206d61746368207368613235362068617368206f662074686520707265696d6167654d656d62657220616c7265616479207375626d69747465642061207075626c6963206b65795265636f76657279204944206d757374206265206f6e65206f66207b302c20312c20322c20337d5061727469616c207369676e657220626f6e64206d757374206265206e6f6e2d7a65726f4d616c6c6561626c65207369676e6174757265202d20732073686f756c6420626520696e20746865206c6f772068616c66206f6620736563703235366b312063757276652773206f726465725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a7231582093d086c35c4fca499396d627646c5cf513542967fa9b3f9aed603900475c2c7064736f6c63430005110032",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c8063893d20e8116100f7578063c36bc45611610095578063d5cc8b0f11610064578063d5cc8b0f14610b2f578063dc3d6da814610b94578063f15d1a9014610bbf578063f4c2b4c114610c88576101cd565b8063c36bc45614610a47578063c9de240d14610a82578063cb7cf18714610aad578063d1cc997614610b00576101cd565b8063a15c3bbb116100d1578063a15c3bbb14610870578063abd14f3714610887578063bf9c83011461090d578063c2b6b58c14610a18576101cd565b8063893d20e8146107565780638da5cb5b146107ad5780639eab525314610804576101cd565b806352a82b651161016f5780636806db1f1161013e5780636806db1f1461053a578063799cd3331461056557806379a80491146105a05780637df2b35714610704576101cd565b806352a82b65146103a95780635a89f810146103d45780635daf08ca1461042f57806363ffab31146104aa576101cd565b806322f3e2d4116101ab57806322f3e2d41461028f5780632930e170146102be5780632e334452146102c857806351cff8d914610358576101cd565b806301ac4293146101d257806307acd5cb146102215780631133fd2c14610238575b600080fd5b3480156101de57600080fd5b5061020b600480360360208110156101f557600080fd5b8101908080359060200190929190505050610cb3565b6040518082815260200191505060405180910390f35b34801561022d57600080fd5b50610236610ccb565b005b34801561024457600080fd5b5061024d611105565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029b57600080fd5b506102a461112b565b604051808215151515815260200191505060405180910390f35b6102c661115a565b005b3480156102d457600080fd5b506102dd611388565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031d578082015181840152602081019050610302565b50505050905090810190601f16801561034a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036457600080fd5b506103a76004803603602081101561037b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061142a565b005b3480156103b557600080fd5b506103be611612565b6040518082815260200191505060405180910390f35b3480156103e057600080fd5b5061042d600480360360408110156103f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611618565b005b34801561043b57600080fd5b506104686004803603602081101561045257600080fd5b8101908080359060200190929190505050611835565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b657600080fd5b506104bf611871565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104ff5780820151818401526020810190506104e4565b50505050905090810190601f16801561052c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561054657600080fd5b5061054f61190f565b6040518082815260200191505060405180910390f35b34801561057157600080fd5b5061059e6004803603602081101561058857600080fd5b8101908080359060200190929190505050611915565b005b3480156105ac57600080fd5b5061070260048036036101008110156105c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561060157600080fd5b82018360208201111561061357600080fd5b8035906020019184602083028401116401000000008311171561063557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611baf565b005b34801561071057600080fd5b506107546004803603606081101561072757600080fd5b810190808035906020019092919080359060200190929190803560ff169060200190929190505050611d56565b005b34801561076257600080fd5b5061076b6121c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107b957600080fd5b506107c26121ed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561081057600080fd5b50610819612212565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561085c578082015181840152602081019050610841565b505050509050019250505060405180910390f35b34801561087c57600080fd5b506108856122a0565b005b34801561089357600080fd5b5061090b600480360360208110156108aa57600080fd5b81019080803590602001906401000000008111156108c757600080fd5b8201836020820111156108d957600080fd5b803590602001918460018302840111640100000000831117156108fb57600080fd5b90919293919293905050506123ee565b005b34801561091957600080fd5b506109fe600480360360a081101561093057600080fd5b81019080803560ff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561097857600080fd5b82018360208201111561098a57600080fd5b803590602001918460018302840111640100000000831117156109ac57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061296e565b604051808215151515815260200191505060405180910390f35b348015610a2457600080fd5b50610a2d612c5e565b604051808215151515815260200191505060405180910390f35b348015610a5357600080fd5b50610a8060048036036020811015610a6a57600080fd5b8101908080359060200190929190505050612c8e565b005b348015610a8e57600080fd5b50610a97612fb9565b6040518082815260200191505060405180910390f35b348015610ab957600080fd5b50610ae660048036036020811015610ad057600080fd5b8101908080359060200190929190505050612fbf565b604051808215151515815260200191505060405180910390f35b348015610b0c57600080fd5b50610b15612fdd565b604051808215151515815260200191505060405180910390f35b348015610b3b57600080fd5b50610b7e60048036036020811015610b5257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061300c565b6040518082815260200191505060405180910390f35b348015610ba057600080fd5b50610ba9613055565b6040518082815260200191505060405180910390f35b348015610bcb57600080fd5b50610c6e600480360360a0811015610be257600080fd5b81019080803560ff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610c2a57600080fd5b820183602082011115610c3c57600080fd5b80359060200191846001830284011164010000000083111715610c5e57600080fd5b90919293919293905050506131eb565b604051808215151515815260200191505060405180910390f35b348015610c9457600080fd5b50610c9d6133bf565b6040518082815260200191505060405180910390f35b60066020528060005260406000206000915090505481565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f7420746865206b656570206f776e65720000000081525060200191505060405180910390fd5b610d9561112b565b610e07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b610e0f6133c9565b60008090505b600280549050811015611102576000600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663446f0f9e60028481548110610e6f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16303073ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d6020811015610f7657600080fd5b81019080805190602001909291905050509050600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cb0a67760028481548110610fd457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16846000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050600060405180830381600087803b1580156110dc57600080fd5b505af11580156110f0573d6000803e3d6000fd5b50505050508080600101915050610e15565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600281111561113957fe5b600c60009054906101000a900460ff16600281111561115457fe5b14905090565b60006002805490509050600061117982346133db90919063ffffffff16565b9050600081116111f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4469766964656e642076616c7565206d757374206265206e6f6e2d7a65726f0081525060200191505060405180910390fd5b60008090505b600183038161ffff16101561129b5781600a600060028461ffff168154811061121c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080806001019150506111f7565b5060006112b1833461346a90919063ffffffff16565b90506112c681836134f490919063ffffffff16565b600a6000600260018703815481106112da57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fa9e4160b29b5c7db7fa61c512c4b45e7c3451c3331537f065a3417778cea5096346040518082815260200191505060405180910390a1505050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114205780601f106113f557610100808354040283529160200191611420565b820191906000526020600020905b81548152906001019060200180831161140357829003601f168201915b5050505050905090565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f2066756e647320746f20776974686472617700000000000000000000000081525060200191505060405180910390fd5b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006115348361357c565b73ffffffffffffffffffffffffffffffffffffffff168260405180600001905060006040518083038185875af1925050503d8060008114611591576040519150601f19603f3d011682016040523d82523d6000602084013e611596565b606091505b505090508061160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5472616e73666572206661696c6564000000000000000000000000000000000081525060200191505060405180910390fd5b505050565b60055481565b600082905060006002805490509050600061163c82856133db90919063ffffffff16565b9050600081116116b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4469766964656e642076616c7565206d757374206265206e6f6e2d7a65726f0081525060200191505060405180910390fd5b60008090505b600183038161ffff161015611746576117393361171160028461ffff16815481106116e157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661357c565b848773ffffffffffffffffffffffffffffffffffffffff1661365f909392919063ffffffff16565b80806001019150506116ba565b50600061175c838661346a90919063ffffffff16565b90506117df336117a56002600187038154811061177557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661357c565b6117b884866134f490919063ffffffff16565b8773ffffffffffffffffffffffffffffffffffffffff1661365f909392919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff167fb69f5873bb2e9e1cc495d5c23d2995010c3b5cdd1756e3cada2bc3f2150902cc866040518082815260200191505060405180910390a2505050505050565b6002818154811061184257fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119075780601f106118dc57610100808354040283529160200191611907565b820191906000526020600020905b8154815290600101906020018083116118ea57829003601f168201915b505050505081565b60035481565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146119d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f7420746865206b656570206f776e65720000000081525060200191505060405180910390fd5b6119df61112b565b611a51576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b600060048054600181600116156101000203166002900490501415611ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5075626c6963206b657920776173206e6f74207365742079657400000000000081525060200191505060405180910390fd5b611ae6613765565b15611b59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5369676e6572206973206275737900000000000000000000000000000000000081525060200191505060405180910390fd5b4260088190555043600660008381526020019081526020016000208190555080600581905550807f34f611bedd4f8c135323bbfc4921e3f6e4feb7eef591036eed6af5462e6cfab060405160405180910390a250565b60008173ffffffffffffffffffffffffffffffffffffffff16631133fd2c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf757600080fd5b505afa158015611c0b573d6000803e3d6000fd5b505050506040513d6020811015611c2157600080fd5b81019080805190602001909291905050509050611c418989898685613772565b85600d8190555083600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a590ae36836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611d2a57600080fd5b505af1158015611d3e573d6000803e3d6000fd5b50505050611d4b85613922565b505050505050505050565b611def336002805480602002602001604051908101604052809291908181526020018280548015611ddc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611d92575b5050505050613a3e90919063ffffffff16565b611e61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f7420746865206b656570206d656d62657200000081525060200191505060405180910390fd5b611e69613765565b611edb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4e6f74206177616974696e672061207369676e6174757265000000000000000081525060200191505060405180910390fd5b60048160ff1610611f37576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806145b66027913960400191505060405180910390fd5b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115611fb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604c815260200180614601604c913960600191505060405180910390fd5b600081601b019050600160055482868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561201a573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff166120dd60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120d35780601f106120a8576101008083540402835291602001916120d3565b820191906000526020600020905b8154815290600101906020018083116120b657829003601f168201915b5050505050613ab9565b73ffffffffffffffffffffffffffffffffffffffff1614612166576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c6964207369676e617475726500000000000000000000000000000081525060200191505060405180910390fd5b60006008819055506005547fb19546e9e0b503d103dd4ae295f4d526e9115adf7c902ead329b1f2404efd35f858585604051808481526020018381526020018260ff1660ff168152602001935050505060405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600280548060200260200160405190810160405280929190818152602001828054801561229657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161224c575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f7420746865206b656570206f776e65720000000081525060200191505060405180910390fd5b61236a61112b565b6123dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b6123e4613acd565b6123ec613c1b565b565b61248733600280548060200260200160405190810160405280929190818152602001828054801561247457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161242a575b5050505050613a3e90919063ffffffff16565b6124f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f43616c6c6572206973206e6f7420746865206b656570206d656d62657200000081525060200191505060405180910390fd5b61250233613d2e565b15612558576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806145916025913960400191505060405180910390fd5b604082829050146125d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5075626c6963206b6579206d757374206265203634206279746573206c6f6e6781525060200191505060405180910390fd5b8181600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020919061261f9291906143e6565b50600080905060008090505b6002805490508110156128e05783836040518083838082843780830192505050925050506040518091039020600960006002848154811061266857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180828054600181600116156101000203166002900480156127285780601f10612706576101008083540402835291820191612728565b820191906000526020600020905b815481529060010190602001808311612714575b50509150506040518091039020146128ca5761277a6002828154811061274a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613d2e565b156128c5573373ffffffffffffffffffffffffffffffffffffffff167f99d98e35ad6445ac964c46a75c7f748e8f390ebdca5a924cd8f92d674fa34ff760096000600285815481106127c857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156128b65780601f1061288b576101008083540402835291602001916128b6565b820191906000526020600020905b81548152906001019060200180831161289957829003601f168201915b50509250505060405180910390a25b6128d3565b81806001019250505b808060010191505061262b565b5060028054905081146128f3575061296a565b8282600491906129049291906143e6565b507ff62bba8b270bef3e8d0fcebc1f86567664da8ccbd03e8509d6231cc8d63f4b31838360405180806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050935050505060405180910390a1505b5050565b600080600480546001816001161561010002031660029004905014156129fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5075626c6963206b657920776173206e6f74207365742079657400000000000081525060200191505060405180910390fd5b60006002836040518082805190602001908083835b60208310612a345780518252602082019150602081019050602083039250612a11565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015612a76573d6000803e3d6000fd5b5050506040513d6020811015612a8b57600080fd5b81019080805190602001909291905050509050808414612af6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806145596038913960400191505060405180910390fd5b600060018589898960405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612b55573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16612c1860048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c0e5780601f10612be357610100808354040283529160200191612c0e565b820191906000526020600020905b815481529060010190602001808311612bf157829003601f168201915b5050505050613ab9565b73ffffffffffffffffffffffffffffffffffffffff16149050808015612c51575060006006600087815260200190815260200160002054145b9250505095945050505050565b600060016002811115612c6d57fe5b600c60009054906101000a900460ff166002811115612c8857fe5b14905090565b600060028054905090506000612cad82846133db90919063ffffffff16565b905060008111612d08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806145dd6024913960400191505060405180910390fd5b60008090505b600183038161ffff161015612e5a57600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8820f6c60028361ffff1681548110612d6c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684336040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015612e3557600080fd5b505af1158015612e49573d6000803e3d6000fd5b505050508080600101915050612d0e565b506000612e70838561346a90919063ffffffff16565b9050600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c8820f6c60026001860381548110612ec057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612efe84866134f490919063ffffffff16565b336040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015612f9b57600080fd5b505af1158015612faf573d6000803e3d6000fd5b5050505050505050565b600d5481565b6000612fc9613765565b8015612fd6575081600554145b9050919050565b6000600280811115612feb57fe5b600c60009054906101000a900460ff16600281111561300657fe5b14905090565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806000905060008090505b6002805490508110156131e357600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663446f0f9e600283815481106130ba57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16303073ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561319757600080fd5b505afa1580156131ab573d6000803e3d6000fd5b505050506040513d60208110156131c157600080fd5b8101908080519060200190929190505050820191508080600101915050613062565b508091505090565b60006131f561112b565b613267576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b60006132ba8888888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061296e565b90508061332f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5369676e6174757265206973206e6f74206672617564756c656e74000000000081525060200191505060405180910390fd5b600b8484604051808383808284378083019250505092505050908152602001604051809103902060009054906101000a900460ff166133b157613370613d8e565b6001600b8585604051808383808284378083019250505092505050908152602001604051809103902060006101000a81548160ff0219169083151502179055505b809150509695505050505050565b6000600754905090565b6133d1613fa9565b6133d9613c1b565b565b6000808211613452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b600082848161345d57fe5b0490508091505092915050565b6000808214156134e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f536166654d6174683a206d6f64756c6f206279207a65726f000000000000000081525060200191505060405180910390fd5b8183816134eb57fe5b06905092915050565b600080828401905083811015613572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba7bffd3836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561361d57600080fd5b505afa158015613631573d6000803e3d6000fd5b505050506040513d602081101561364757600080fd5b81019080805190602001909291905050509050919050565b61375f848573ffffffffffffffffffffffffffffffffffffffff166323b872dd905060e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613fb3565b50505050565b6000806008541415905090565b600c60159054906101000a900460ff16156137f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f436f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836002908051906020019061384b929190614466565b508260038190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600c60006101000a81548160ff021916908360028111156138b357fe5b02179055506001600c60156101000a81548160ff0219169083151502179055504260078190555081600c60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60008090505b600280549050811015613a3a57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e1625e6002838154811061398057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613a1557600080fd5b505af1158015613a29573d6000803e3d6000fd5b505050508080600101915050613928565b5050565b600080600090505b8351811015613aad57838181518110613a5b57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613aa0576001915050613ab3565b8080600101915050613a46565b50600090505b92915050565b6000818051906020012060001c9050919050565b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613b8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616c6c6572206973206e6f7420746865206b656570206f776e65720000000081525060200191505060405180910390fd5b613b9761112b565b613c09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b656570206973206e6f7420616374697665000000000000000000000000000081525060200191505060405180910390fd5b613c116141fe565b613c19614250565b565b60008090505b600280549050811015613d2b57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634a1ce59960028381548110613c7957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015613d0657600080fd5b505af1158015613d1a573d6000803e3d6000fd5b505050508080600101915050613c21565b50565b600080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546001816001161561010002031660029004905014159050919050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600d54600260405160240180838152602001806020018281038252838181548152602001915080548015613e5257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613e08575b505093505050506040516020818303038152906040527f8e49aa7a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310613f095780518252602082019150602081019050602083039250613ee6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613f6b576040519150601f19603f3d011682016040523d82523d6000602084013e613f70565b606091505b5050905080613fa6577f9caa8d499152520a1b3e11b41d51a51e5d1699294ebccdb9de0faa824dba8aae60405160405180910390a15b50565b613fb1614381565b565b613fd28273ffffffffffffffffffffffffffffffffffffffff166143d3565b614044576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106140935780518252602082019150602081019050602083039250614070565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146140f5576040519150601f19603f3d011682016040523d82523d6000602084013e6140fa565b606091505b509150915081614172576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b6000815111156141f85780806020019051602081101561419157600080fd5b81019080805190602001909291905050506141f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061464d602a913960400191505060405180910390fd5b5b50505050565b6001600c60006101000a81548160ff0219169083600281111561421d57fe5b02179055507f400fd7ee62b209afddce9dfbca204b2124c135597dff0ac92e9844e2b08927f660405160405180910390a1565b60008090505b60028054905081101561437e57600c60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ab3cf93600283815481106142ae57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561435957600080fd5b505af115801561436d573d6000803e3d6000fd5b505050508080600101915050614256565b50565b6002600c60006101000a81548160ff021916908360028111156143a057fe5b02179055507f39f530c1293a870138e53618b826819a76f1fe86b5d500ba4622f9e8354a846a60405160405180910390a1565b600080823b905060008111915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061442757803560ff1916838001178555614455565b82800160010185558215614455579182015b82811115614454578235825591602001919060010190614439565b5b50905061446291906144f0565b5090565b8280548282559060005260206000209081019282156144df579160200282015b828111156144de5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190614486565b5b5090506144ec9190614515565b5090565b61451291905b8082111561450e5760008160009055506001016144f6565b5090565b90565b61455591905b8082111561455157600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555060010161451b565b5090565b9056fe5369676e65642064696765737420646f6573206e6f74206d61746368207368613235362068617368206f662074686520707265696d6167654d656d62657220616c7265616479207375626d69747465642061207075626c6963206b65795265636f76657279204944206d757374206265206f6e65206f66207b302c20312c20322c20337d5061727469616c207369676e657220626f6e64206d757374206265206e6f6e2d7a65726f4d616c6c6561626c65207369676e6174757265202d20732073686f756c6420626520696e20746865206c6f772068616c66206f6620736563703235366b312063757276652773206f726465725361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a265627a7a7231582093d086c35c4fca499396d627646c5cf513542967fa9b3f9aed603900475c2c7064736f6c63430005110032",
  "sourceMap": "2214:4419:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2214:4419:2;;;;;;;",
  "deployedSourceMap": "2214:4419:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3336:42:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3336:42:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3336:42:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;17831:533;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17831:533:0;;;:::i;:::-;;2661:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2661:31:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;19977:94;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19977:94:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11723:672;;;:::i;:::-;;6572:94;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6572:94:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;6572:94:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14532:379;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14532:379:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14532:379:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;3124:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3124:21:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13074:942;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13074:942:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13074:942:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2739:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2739:24:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2739:24:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3012:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3012:22:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;3012:22:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2848:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2848:30:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8629:401;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8629:401:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8629:401:0;;;;;;;;;;;;;;;;;:::i;:::-;;3683:766:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3683:766:2;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;3683:766:2;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;3683:766:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3683:766:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;3683:766:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;3683:766:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;10051:1197:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10051:1197:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10051:1197:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;16582:81;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16582:81:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2635:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2635:20:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;20775:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20775:92:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;20775:92:0;;;;;;;;;;;;;;;;;4816:117:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4816:117:2;;;:::i;:::-;;7106:1332:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7106:1332:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7106:1332:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;7106:1332:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7106:1332:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;7106:1332:0;;;;;;;;;;;;:::i;:::-;;21879:733;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21879:733:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;21879:733:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;21879:733:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;21879:733:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;21879:733:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;21879:733:0;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;20238:94;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20238:94:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;18811:681;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18811:681:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18811:681:0;;;;;;;;;;;;;;;;;:::i;:::-;;2395:26:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2395:26:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9445:141:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9445:141:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9445:141:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;20569:102;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20569:102:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;14182:156;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14182:156:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14182:156:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;17021:359;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17021:359:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;15950:539;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15950:539:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;15950:539:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;15950:539:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;15950:539:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;15950:539:0;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;16778:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16778:113:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3336:42;;;;;;;;;;;;;;;;;:::o;17831:533::-;26377:10;26368:19;;:5;;;;;;;;;;;:19;;;26360:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26888:10;:8;:10::i;:::-;26880:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17903:15;:13;:15::i;:::-;17934:9;17946:1;17934:13;;17929:429;17953:7;:14;;;;17949:1;:18;17929:429;;;17988:14;18021:7;;;;;;;;;;;:18;;;18061:7;18069:1;18061:10;;;;;;;;;;;;;;;;;;;;;;;;;18101:4;18144;18128:22;;18021:147;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18021:147:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18021:147:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;18021:147:0;;;;;;;;;;;;;;;;17988:180;;18183:7;;;;;;;;;;;:17;;;18218:7;18226:1;18218:10;;;;;;;;;;;;;;;;;;;;;;;;;18262:4;18246:22;;18286:6;18326:5;;;;;;;;;;;18183:164;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18183:164:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18183:164:0;;;;17929:429;17969:3;;;;;;;17929:429;;;;17831:533::o;2661:31::-;;;;;;;;;;;;;:::o;19977:94::-;20018:4;20051:13;20041:23;;;;;;;;:6;;;;;;;;;;;:23;;;;;;;;;20034:30;;19977:94;:::o;11723:672::-;11781:19;11803:7;:14;;;;11781:36;;11827:16;11846:26;11860:11;11846:9;:13;;:26;;;;:::i;:::-;11827:45;;11902:1;11891:8;:12;11883:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11955:8;11966:1;11955:12;;11950:111;11987:1;11973:11;:15;11969:1;:19;;;11950:111;;;12042:8;12009:17;:29;12027:7;12035:1;12027:10;;;;;;;;;;;;;;;;;;;;;;;;;;;12009:29;;;;;;;;;;;;;;;;:41;;;;;;;;;;;11990:3;;;;;;;11950:111;;;;12215:17;12235:26;12249:11;12235:9;:13;;:26;;;;:::i;:::-;12215:46;;12318:23;12331:9;12318:8;:12;;:23;;;;:::i;:::-;12271:17;:43;12289:7;12311:1;12297:11;:15;12289:24;;;;;;;;;;;;;;;;;;;;;;;;;12271:43;;;;;;;;;;;;;;;;:70;;;;;;;;;;;12357:31;12378:9;12357:31;;;;;;;;;;;;;;;;;;11723:672;;;:::o;6572:94::-;6619:12;6650:9;6643:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6572:94;:::o;14532:379::-;14586:13;14602:17;:26;14620:7;14602:26;;;;;;;;;;;;;;;;14586:42;;14655:1;14647:5;:9;14639:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14721:1;14692:17;:26;14710:7;14692:26;;;;;;;;;;;;;;;:30;;;;14796:12;14814:22;14828:7;14814:13;:22::i;:::-;:27;;14848:5;14814:44;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;14795:63:0;;;14877:7;14869:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14532:379;;;:::o;3124:21::-;;;;:::o;13074:942::-;13175:12;13197:13;13175:36;;13222:19;13244:7;:14;;;;13222:36;;13268:16;13287:23;13298:11;13287:6;:10;;:23;;;;:::i;:::-;13268:42;;13340:1;13329:8;:12;13321:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13393:8;13404:1;13393:12;;13388:203;13425:1;13411:11;:15;13407:1;:19;;;13388:203;;;13447:133;13487:10;13515:25;13529:7;13537:1;13529:10;;;;;;;;;;;;;;;;;;;;;;;;;;;13515:13;:25::i;:::-;13558:8;13447:5;:22;;;;:133;;;;;;:::i;:::-;13428:3;;;;;;;13388:203;;;;13749:17;13769:23;13780:11;13769:6;:10;;:23;;;;:::i;:::-;13749:43;;13802:146;13838:10;13862:39;13876:7;13898:1;13884:11;:15;13876:24;;;;;;;;;;;;;;;;;;;;;;;;;13862:13;:39::i;:::-;13915:23;13928:9;13915:8;:12;;:23;;;;:::i;:::-;13802:5;:22;;;;:146;;;;;;:::i;:::-;13987:13;13964:45;;;14002:6;13964:45;;;;;;;;;;;;;;;;;;13074:942;;;;;;:::o;2739:24::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3012:22::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2848:30::-;;;;:::o;8629:401::-;26377:10;26368:19;;:5;;;;;;;;;;;:19;;;26360:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26888:10;:8;:10::i;:::-;26880:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8732:1;8712:9;:16;;;;;;;;;;;;;;;;:21;;8704:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8783:21;:19;:21::i;:::-;8782:22;8774:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8897:15;8873:21;:39;;;;8942:12;8923:7;:16;8931:7;8923:16;;;;;;;;;;;:31;;;;8973:7;8964:6;:16;;;;9015:7;8996:27;;;;;;;;;;8629:401;:::o;3683:766:2:-;3984:25;4047:12;4024:53;;;:55;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4024:55:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4024:55:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4024:55:2;;;;;;;;;;;;;;;;3984:95;;4090:155;4120:6;4140:8;4162:16;4192:12;4218:17;4090:16;:155::i;:::-;4270:12;4256:11;:26;;;;4320:13;4292:12;;:42;;;;;;;;;;;;;;;;;;4345:12;;;;;;;;;;;:36;;;4382:12;4345:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4345:50:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4345:50:2;;;;4406:36;4423:18;4406:16;:36::i;:::-;3683:766;;;;;;;;;:::o;10051:1197:0:-;26624:28;26641:10;26624:7;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:28;;;;:::i;:::-;26616:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10187:21;:19;:21::i;:::-;10179:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10269:1;10255:11;:15;;;10247:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10578:66;10555:2;10547:11;;:97;;10526:220;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10947:8;10963:11;10958:2;:16;10947:27;;11070:29;11080:6;;11088:2;11092;11096;11070:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11070:29:0;;;;;;;;11037:62;;:29;11056:9;11037:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:18;:29::i;:::-;:62;;;11016:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11177:1;11153:21;:25;;;;11213:6;;11194:47;11221:2;11225;11229:11;11194:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26696:1;10051:1197;;;:::o;16582:81::-;16625:7;16651:5;;;;;;;;;;;16644:12;;16582:81;:::o;2635:20::-;;;;;;;;;;;;;:::o;20775:92::-;20818:16;20853:7;20846:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20775:92;:::o;4816:117:2:-;26377:10:0;26368:19;;:5;;;;;;;;;;;:19;;;26360:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26888:10;:8;:10::i;:::-;26880:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4879:17:2;:15;:17::i;:::-;4906:20;:18;:20::i;:::-;4816:117::o;7106:1332:0:-;26624:28;26641:10;26624:7;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:28;;;;:::i;:::-;26616:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7210:39;7238:10;7210:27;:39::i;:::-;7209:40;7188:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7352:2;7331:10;;:17;;:23;7323:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7436:10;;7402:19;:31;7422:10;7402:31;;;;;;;;;;;;;;;:44;;;;;;;:::i;:::-;;7575:31;7609:1;7575:35;;7625:9;7637:1;7625:13;;7620:603;7644:7;:14;;;;7640:1;:18;7620:603;;;7772:10;;7762:21;;;;;30:3:-1;22:6;14;1:33;57:3;49:6;45:16;35:26;;7762:21:0;;;;;;;;;;;;;7710:19;:31;7730:7;7738:1;7730:10;;;;;;;;;;;;;;;;;;;;;;;;;7710:31;;;;;;;;;;;;;;;7700:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:83;7679:534;;7904:39;7932:7;7940:1;7932:10;;;;;;;;;;;;;;;;;;;;;;;;;7904:27;:39::i;:::-;7900:235;;;8027:10;7972:144;;;8063:19;:31;8083:7;8091:1;8083:10;;;;;;;;;;;;;;;;;;;;;;;;;8063:31;;;;;;;;;;;;;;;7972:144;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7900:235;7679:534;;;8173:25;;;;;;;7679:534;7660:3;;;;;;;7620:603;;;;8264:7;:14;;;;8237:23;:41;8233:78;;8294:7;;;8233:78;8376:10;;8364:9;:22;;;;;;;:::i;:::-;;8401:30;8420:10;;8401:30;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8401:30:0;;;;;;;;;;;;;;26696:1;;7106:1332;;:::o;21879:733::-;22056:13;22109:1;22089:9;:16;;;;;;;;;;;;;;;;:21;;22081:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22152:24;22179:17;22186:9;22179:17;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;22179:17:0;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22179:17:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;22179:17:0;;;;;;;;;;;;;;;;22152:44;;22244:16;22227:13;:33;22206:136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22353:21;22438:36;22448:13;22463:2;22467;22471;22438:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22438:36:0;;;;;;;;22389:85;;:29;22408:9;22389:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:18;:29::i;:::-;:85;;;22353:121;;22558:16;:47;;;;;22604:1;22578:7;:22;22586:13;22578:22;;;;;;;;;;;;:27;22558:47;22551:54;;;;21879:733;;;;;;;:::o;20238:94::-;20279:4;20312:13;20302:23;;;;;;;;:6;;;;;;;;;;;:23;;;;;;;;;20295:30;;20238:94;:::o;18811:681::-;18881:19;18903:7;:14;;;;18881:36;;18927:21;18951:24;18963:11;18951:7;:11;;:24;;;;:::i;:::-;18927:48;;19009:1;18993:13;:17;18985:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19067:8;19078:1;19067:12;;19062:125;19097:1;19085:11;:13;19081:1;:17;;;19062:125;;;19119:7;;;;;;;;;;;:18;;;19138:7;19146:1;19138:10;;;;;;;;;;;;;;;;;;;;;;;;;;;19150:13;19165:10;19119:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19119:57:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;19119:57:0;;;;19100:3;;;;;;;19062:125;;;;19345:17;19365:24;19377:11;19365:7;:11;;:24;;;;:::i;:::-;19345:44;;19399:7;;;;;;;;;;;:18;;;19418:7;19440:1;19426:11;:15;19418:24;;;;;;;;;;;;;;;;;;;;;;;;;19444:28;19462:9;19444:13;:17;;:28;;;;:::i;:::-;19474:10;19399:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19399:86:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;19399:86:0;;;;18811:681;;;;:::o;2395:26:2:-;;;;:::o;9445:141:0:-;9514:4;9537:21;:19;:21::i;:::-;:42;;;;;9572:7;9562:6;;:17;9537:42;9530:49;;9445:141;;;:::o;20569:102::-;20614:4;20647:17;20637:27;;;;;;;;:6;;;;;;;;;;;:27;;;;;;;;;20630:34;;20569:102;:::o;14182:156::-;14275:7;14305:17;:26;14323:7;14305:26;;;;;;;;;;;;;;;;14298:33;;14182:156;;;:::o;17021:359::-;17071:7;17090:21;17114:1;17090:25;;17130:9;17142:1;17130:13;;17125:218;17149:7;:14;;;;17145:1;:18;17125:218;;;17201:7;;;;;;;;;;;:18;;;17237:7;17245:1;17237:10;;;;;;;;;;;;;;;;;;;;;;;;;17273:4;17312;17296:22;;17201:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17201:131:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17201:131:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;17201:131:0;;;;;;;;;;;;;;;;17184:148;;;;17165:3;;;;;;;17125:218;;;;17360:13;17353:20;;;17021:359;:::o;15950:539::-;16142:13;26888:10;:8;:10::i;:::-;26880:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16167:12;16194:57;16214:2;16218;16222;16226:13;16241:9;;16194:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;16194:57:0;;;;;;:19;:57::i;:::-;16167:84;;16270:7;16262:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16325:19;16345:9;;16325:30;;;;;30:3:-1;22:6;14;1:33;57:3;49:6;45:16;35:26;;16325:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;16320:138;;16371:24;:22;:24::i;:::-;16443:4;16410:19;16430:9;;16410:30;;;;;30:3:-1;22:6;14;1:33;57:3;49:6;45:16;35:26;;16410:30:0;;;;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;16320:138;16475:7;16468:14;;;15950:539;;;;;;;;:::o;16778:113::-;16831:7;16857:27;;16850:34;;16778:113;:::o;4976:102:2:-;5020:21;:19;:21::i;:::-;5051:20;:18;:20::i;:::-;4976:102::o;2606:326:94:-;2664:7;2761:1;2757;:5;2749:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2803:9;2819:1;2815;:5;;;;;;2803:17;;2924:1;2917:8;;;2606:326;;;;:::o;3376:149::-;3434:7;3466:1;3461;:6;;3453:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3517:1;3513;:5;;;;;;3506:12;;3376:149;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o;6464:167:2:-;6551:15;6589:12;;;;;;;;;;;:26;;;6616:7;6589:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6589:35:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6589:35:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6589:35:2;;;;;;;;;;;;;;;;6582:42;;6464:167;;;:::o;842:202:101:-;942:95;961:5;991;:18;;;:27;;;;1020:4;1026:2;1030:5;968:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;968:68:101;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;968:68:101;942:18;:95::i;:::-;842:202;;;;:::o;24250:110:0:-;24304:4;24352:1;24327:21;;:26;;24320:33;;24250:110;:::o;23160:635::-;23368:13;;;;;;;;;;;23367:14;23359:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23433:6;23425:5;;:14;;;;;;;;;;;;;;;;;;23459:8;23449:7;:18;;;;;;;;;;;;:::i;:::-;;23495:16;23477:15;:34;;;;23540:17;23521:16;;:36;;;;;;;;;;;;;;;;;;23576:13;23567:6;;:22;;;;;;;;;;;;;;;;;;;;;;;;23615:4;23599:13;;:20;;;;;;;;;;;;;;;;;;23724:15;23694:27;:45;;;;23779:8;23750:7;;:38;;;;;;;;;;;;;;;;;;23160:635;;;;;:::o;5841:203:2:-;5919:9;5931:1;5919:13;;5914:124;5938:7;:14;;;;5934:1;:18;5914:124;;;5973:12;;;;;;;;;;;:22;;;5996:7;6004:1;5996:10;;;;;;;;;;;;;;;;;;;;;;;;;6008:18;5973:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5973:54:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5973:54:2;;;;5954:3;;;;;;;5914:124;;;;5841:203;:::o;59:286:68:-;165:4;190:6;199:1;190:10;;185:132;206:4;:11;202:1;:15;185:132;;;254:4;259:1;254:7;;;;;;;;;;;;;;242:19;;:8;:19;;;238:69;;;288:4;281:11;;;;;238:69;219:3;;;;;;;185:132;;;;333:5;326:12;;59:286;;;;;:::o;25165:307:0:-;25265:7;25451:10;25441:21;;;;;;25433:30;;25410:55;;25165:307;;;:::o;19746:112::-;26377:10;26368:19;;:5;;;;;;;;;;;:19;;;26360:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26888:10;:8;:10::i;:::-;26880:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19809:14;:12;:14::i;:::-;19833:18;:16;:18::i;:::-;19746:112::o;6150:161:2:-;6204:9;6216:1;6204:13;;6199:106;6223:7;:14;;;;6219:1;:18;6199:106;;;6258:12;;;;;;;;;;;:24;;;6283:7;6291:1;6283:10;;;;;;;;;;;;;;;;;;;;;;;;;6258:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6258:36:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6258:36:2;;;;6239:3;;;;;;;6199:106;;;;6150:161::o;23991:175:0:-;24092:4;24158:1;24119:19;:28;24139:7;24119:28;;;;;;;;;;;;;;;:35;;;;;;;;;;;;;;;;:40;;24112:47;;23991:175;;;:::o;5084:629:2:-;5177:12;5215;;;;;;;;;;;5207:26;;5344:11;;5377:7;5251:151;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5251:151:2;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;5251:151:2;5207:209;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;5207:209:2;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5176:240:2;;;5652:7;5647:60;;5680:16;;;;;;;;;;5647:60;5084:629;:::o;25747:69:0:-;25791:18;:16;:18::i;:::-;25747:69::o;2621:1095:101:-;3216:27;3224:5;3216:25;;;:27::i;:::-;3208:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3350:12;3364:23;3399:5;3391:19;;3411:4;3391:25;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;3391:25:101;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;3349:67:101;;;;3434:7;3426:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3513:1;3493:10;:17;:21;3489:221;;;3633:10;3622:30;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3622:30:101;;;;;;;;;;;;;;;;3614:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3489:221;2621:1095;;;;:::o;24543:99:0:-;24595:13;24586:6;;:22;;;;;;;;;;;;;;;;;;;;;;;;24623:12;;;;;;;;;;24543:99::o;25529:175::-;25581:9;25593:1;25581:13;;25576:122;25600:7;:14;;;;25596:1;:18;25576:122;;;25635:7;;;;;;;;;;;:16;;;25652:7;25660:1;25652:10;;;;;;;;;;;;;;;;;;;;;;;;;25680:4;25664:22;;25635:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25635:52:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25635:52:0;;;;25616:3;;;;;;;25576:122;;;;25529:175::o;24833:111::-;24889:17;24880:6;;:26;;;;;;;;;;;;;;;;;;;;;;;;24921:16;;;;;;;;;;24833:111::o;542:413:102:-;602:4;805:12;914:7;902:20;894:28;;947:1;940:4;:8;933:15;;;542:413;;;:::o;2214:4419:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "/**\n▓▓▌ ▓▓ ▐▓▓ ▓▓▓▓▓▓▓▓▓▓▌▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▄\n▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▌▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  ▓▓▓▓▓▓    ▓▓▓▓▓▓▓▀    ▐▓▓▓▓▓▓    ▐▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓▓   ▐▓▓▓▓▓▌   ▐▓▓▓▓▓▓\n  ▓▓▓▓▓▓▄▄▓▓▓▓▓▓▓▀      ▐▓▓▓▓▓▓▄▄▄▄         ▓▓▓▓▓▓▄▄▄▄         ▐▓▓▓▓▓▌   ▐▓▓▓▓▓▓\n  ▓▓▓▓▓▓▓▓▓▓▓▓▓▀        ▐▓▓▓▓▓▓▓▓▓▓         ▓▓▓▓▓▓▓▓▓▓▌        ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n  ▓▓▓▓▓▓▀▀▓▓▓▓▓▓▄       ▐▓▓▓▓▓▓▀▀▀▀         ▓▓▓▓▓▓▀▀▀▀         ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀\n  ▓▓▓▓▓▓   ▀▓▓▓▓▓▓▄     ▐▓▓▓▓▓▓     ▓▓▓▓▓   ▓▓▓▓▓▓     ▓▓▓▓▓   ▐▓▓▓▓▓▌\n▓▓▓▓▓▓▓▓▓▓ █▓▓▓▓▓▓▓▓▓ ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓▓▓\n▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓ ▐▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓▓▓\n\n                           Trust math, not hardware.\n*/\n\npragma solidity 0.5.17;\n\nimport \"./AbstractBondedECDSAKeep.sol\";\nimport \"./BondedECDSAKeepFactory.sol\";\n\nimport \"@keep-network/keep-core/contracts/TokenStaking.sol\";\n\n/// @title Bonded ECDSA Keep\n/// @notice ECDSA keep with additional signer bond requirement.\n/// @dev This contract is used as a master contract for clone factory in\n/// BondedECDSAKeepFactory as per EIP-1167.\ncontract BondedECDSAKeep is AbstractBondedECDSAKeep {\n    // Stake that was required from each keep member on keep creation.\n    // The value is used for keep members slashing.\n    uint256 public memberStake;\n\n    // Emitted when KEEP token slashing failed when submitting signature\n    // fraud proof. In practice, this situation should never happen but we want\n    // to be very explicit in this contract and protect the owner that even if\n    // it happens, the transaction submitting fraud proof is not going to fail\n    // and keep owner can seize and liquidate bonds in the same transaction.\n    event SlashingFailed();\n\n    TokenStaking tokenStaking;\n\n    /// @notice Initialization function.\n    /// @dev We use clone factory to create new keep. That is why this contract\n    /// doesn't have a constructor. We provide keep parameters for each instance\n    /// function after cloning instances from the master contract.\n    /// @param _owner Address of the keep owner.\n    /// @param _members Addresses of the keep members.\n    /// @param _honestThreshold Minimum number of honest keep members.\n    /// @param _memberStake Stake required from each keep member.\n    /// @param _stakeLockDuration Stake lock duration in seconds.\n    /// @param _tokenStaking Address of the TokenStaking contract.\n    /// @param _keepBonding Address of the KeepBonding contract.\n    /// @param _keepFactory Address of the BondedECDSAKeepFactory that created\n    /// this keep.\n    function initialize(\n        address _owner,\n        address[] memory _members,\n        uint256 _honestThreshold,\n        uint256 _memberStake,\n        uint256 _stakeLockDuration,\n        address _tokenStaking,\n        address _keepBonding,\n        address payable _keepFactory\n    ) public {\n        address _bondTokenAddress =\n            BondedECDSAKeepFactory(_keepFactory).bondTokenAddress();\n\n        super.initialize(\n            _owner,\n            _members,\n            _honestThreshold,\n            _keepBonding,\n            _bondTokenAddress\n        );\n\n        memberStake = _memberStake;\n        tokenStaking = TokenStaking(_tokenStaking);\n\n        tokenStaking.claimDelegatedAuthority(_keepFactory);\n\n        lockMemberStakes(_stakeLockDuration);\n    }\n\n    /// @notice Closes keep when owner decides that they no longer need it.\n    /// Releases bonds to the keep members. Keep can be closed only when\n    /// there is no signing in progress or requested signing process has timed out.\n    /// @dev The function can be called only by the owner of the keep and only\n    /// if the keep has not been already closed.\n    function closeKeep() public onlyOwner onlyWhenActive {\n        super.closeKeep();\n        unlockMemberStakes();\n    }\n\n    /// @notice Terminates the keep.\n    function terminateKeep() internal {\n        super.terminateKeep();\n        unlockMemberStakes();\n    }\n\n    function slashForSignatureFraud() internal {\n        /* solium-disable-next-line */\n        (bool success, ) =\n            address(tokenStaking).call(\n                abi.encodeWithSignature(\n                    \"slash(uint256,address[])\",\n                    memberStake,\n                    members\n                )\n            );\n\n        // Should never happen but we want to protect the owner and make sure the\n        // fraud submission transaction does not fail so that the owner can\n        // seize and liquidate bonds in the same transaction.\n        if (!success) {\n            emit SlashingFailed();\n        }\n    }\n\n    /// @notice Creates locks on members' token stakes.\n    /// @param _stakeLockDuration Stake lock duration in seconds.\n    function lockMemberStakes(uint256 _stakeLockDuration) internal {\n        for (uint256 i = 0; i < members.length; i++) {\n            tokenStaking.lockStake(members[i], _stakeLockDuration);\n        }\n    }\n\n    /// @notice Releases locks the keep had previously placed on the members'\n    /// token stakes.\n    function unlockMemberStakes() internal {\n        for (uint256 i = 0; i < members.length; i++) {\n            tokenStaking.unlockStake(members[i]);\n        }\n    }\n\n    /// @notice Gets the beneficiary for the specified member address.\n    /// @param _member Member address.\n    /// @return Beneficiary address.\n    function beneficiaryOf(address _member)\n        internal\n        view\n        returns (address payable)\n    {\n        return tokenStaking.beneficiaryOf(_member);\n    }\n}\n",
  "sourcePath": "/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/BondedECDSAKeep.sol",
  "ast": {
    "absolutePath": "/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/BondedECDSAKeep.sol",
    "exportedSymbols": {
      "BondedECDSAKeep": [
        2057
      ]
    },
    "id": 2058,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1867,
        "literals": [
          "solidity",
          "0.5",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "1837:23:2"
      },
      {
        "absolutePath": "/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/AbstractBondedECDSAKeep.sol",
        "file": "./AbstractBondedECDSAKeep.sol",
        "id": 1868,
        "nodeType": "ImportDirective",
        "scope": 2058,
        "sourceUnit": 1110,
        "src": "1862:39:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/BondedECDSAKeepFactory.sol",
        "file": "./BondedECDSAKeepFactory.sol",
        "id": 1869,
        "nodeType": "ImportDirective",
        "scope": 2058,
        "sourceUnit": 2472,
        "src": "1902:38:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@keep-network/keep-core/contracts/TokenStaking.sol",
        "file": "@keep-network/keep-core/contracts/TokenStaking.sol",
        "id": 1870,
        "nodeType": "ImportDirective",
        "scope": 2058,
        "sourceUnit": 14181,
        "src": "1942:60:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1871,
              "name": "AbstractBondedECDSAKeep",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1109,
              "src": "2242:23:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AbstractBondedECDSAKeep_$1109",
                "typeString": "contract AbstractBondedECDSAKeep"
              }
            },
            "id": 1872,
            "nodeType": "InheritanceSpecifier",
            "src": "2242:23:2"
          }
        ],
        "contractDependencies": [
          1109,
          5710
        ],
        "contractKind": "contract",
        "documentation": "@title Bonded ECDSA Keep\n @notice ECDSA keep with additional signer bond requirement.\n @dev This contract is used as a master contract for clone factory in\n BondedECDSAKeepFactory as per EIP-1167.",
        "fullyImplemented": true,
        "id": 2057,
        "linearizedBaseContracts": [
          2057,
          1109,
          5710
        ],
        "name": "BondedECDSAKeep",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1874,
            "name": "memberStake",
            "nodeType": "VariableDeclaration",
            "scope": 2057,
            "src": "2395:26:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1873,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2395:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1876,
            "name": "SlashingFailed",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1875,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2836:2:2"
            },
            "src": "2816:23:2"
          },
          {
            "constant": false,
            "id": 1878,
            "name": "tokenStaking",
            "nodeType": "VariableDeclaration",
            "scope": 2057,
            "src": "2845:25:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_TokenStaking_$14180",
              "typeString": "contract TokenStaking"
            },
            "typeName": {
              "contractScope": null,
              "id": 1877,
              "name": "TokenStaking",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 14180,
              "src": "2845:12:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TokenStaking_$14180",
                "typeString": "contract TokenStaking"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1936,
              "nodeType": "Block",
              "src": "3974:475:2",
              "statements": [
                {
                  "assignments": [
                    1899
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1899,
                      "name": "_bondTokenAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 1936,
                      "src": "3984:25:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1898,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3984:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1905,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1901,
                            "name": "_keepFactory",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1895,
                            "src": "4047:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1900,
                          "name": "BondedECDSAKeepFactory",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2471,
                          "src": "4024:22:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_BondedECDSAKeepFactory_$2471_$",
                            "typeString": "type(contract BondedECDSAKeepFactory)"
                          }
                        },
                        "id": 1902,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4024:36:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BondedECDSAKeepFactory_$2471",
                          "typeString": "contract BondedECDSAKeepFactory"
                        }
                      },
                      "id": 1903,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "bondTokenAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2118,
                      "src": "4024:53:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 1904,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4024:55:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3984:95:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1909,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1880,
                        "src": "4120:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1910,
                        "name": "_members",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1883,
                        "src": "4140:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1911,
                        "name": "_honestThreshold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1885,
                        "src": "4162:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1912,
                        "name": "_keepBonding",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1893,
                        "src": "4192:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1913,
                        "name": "_bondTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1899,
                        "src": "4218:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1906,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22587,
                        "src": "4090:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_BondedECDSAKeep_$2057",
                          "typeString": "contract super BondedECDSAKeep"
                        }
                      },
                      "id": 1908,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialize",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 959,
                      "src": "4090:16:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address[] memory,uint256,address,address)"
                      }
                    },
                    "id": 1914,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4090:155:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1915,
                  "nodeType": "ExpressionStatement",
                  "src": "4090:155:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1918,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1916,
                      "name": "memberStake",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1874,
                      "src": "4256:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1917,
                      "name": "_memberStake",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1887,
                      "src": "4270:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4256:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1919,
                  "nodeType": "ExpressionStatement",
                  "src": "4256:26:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1924,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1920,
                      "name": "tokenStaking",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1878,
                      "src": "4292:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_TokenStaking_$14180",
                        "typeString": "contract TokenStaking"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 1922,
                          "name": "_tokenStaking",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1891,
                          "src": "4320:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1921,
                        "name": "TokenStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14180,
                        "src": "4307:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_TokenStaking_$14180_$",
                          "typeString": "type(contract TokenStaking)"
                        }
                      },
                      "id": 1923,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4307:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_TokenStaking_$14180",
                        "typeString": "contract TokenStaking"
                      }
                    },
                    "src": "4292:42:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_TokenStaking_$14180",
                      "typeString": "contract TokenStaking"
                    }
                  },
                  "id": 1925,
                  "nodeType": "ExpressionStatement",
                  "src": "4292:42:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1929,
                        "name": "_keepFactory",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1895,
                        "src": "4382:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1926,
                        "name": "tokenStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1878,
                        "src": "4345:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_TokenStaking_$14180",
                          "typeString": "contract TokenStaking"
                        }
                      },
                      "id": 1928,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "claimDelegatedAuthority",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8174,
                      "src": "4345:36:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 1930,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4345:50:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1931,
                  "nodeType": "ExpressionStatement",
                  "src": "4345:50:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1933,
                        "name": "_stakeLockDuration",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1889,
                        "src": "4423:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1932,
                      "name": "lockMemberStakes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2018,
                      "src": "4406:16:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1934,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4406:36:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1935,
                  "nodeType": "ExpressionStatement",
                  "src": "4406:36:2"
                }
              ]
            },
            "documentation": "@notice Initialization function.\n @dev We use clone factory to create new keep. That is why this contract\n doesn't have a constructor. We provide keep parameters for each instance\n function after cloning instances from the master contract.\n @param _owner Address of the keep owner.\n @param _members Addresses of the keep members.\n @param _honestThreshold Minimum number of honest keep members.\n @param _memberStake Stake required from each keep member.\n @param _stakeLockDuration Stake lock duration in seconds.\n @param _tokenStaking Address of the TokenStaking contract.\n @param _keepBonding Address of the KeepBonding contract.\n @param _keepFactory Address of the BondedECDSAKeepFactory that created\n this keep.",
            "id": 1937,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1896,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1880,
                  "name": "_owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3712:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1879,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3712:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1883,
                  "name": "_members",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3736:25:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1881,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3736:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1882,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "3736:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1885,
                  "name": "_honestThreshold",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3771:24:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1884,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3771:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1887,
                  "name": "_memberStake",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3805:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1886,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3805:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1889,
                  "name": "_stakeLockDuration",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3835:26:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1888,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3835:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1891,
                  "name": "_tokenStaking",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3871:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1890,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3871:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1893,
                  "name": "_keepBonding",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3902:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1892,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3902:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1895,
                  "name": "_keepFactory",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3932:28:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 1894,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3932:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3702:264:2"
            },
            "returnParameters": {
              "id": 1897,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3974:0:2"
            },
            "scope": 2057,
            "src": "3683:766:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1952,
              "nodeType": "Block",
              "src": "4869:64:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1944,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22587,
                        "src": "4879:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_BondedECDSAKeep_$2057",
                          "typeString": "contract super BondedECDSAKeep"
                        }
                      },
                      "id": 1946,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "closeKeep",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 802,
                      "src": "4879:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1947,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4879:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1948,
                  "nodeType": "ExpressionStatement",
                  "src": "4879:17:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1949,
                      "name": "unlockMemberStakes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2043,
                      "src": "4906:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1950,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4906:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1951,
                  "nodeType": "ExpressionStatement",
                  "src": "4906:20:2"
                }
              ]
            },
            "documentation": "@notice Closes keep when owner decides that they no longer need it.\n Releases bonds to the keep members. Keep can be closed only when\n there is no signing in progress or requested signing process has timed out.\n @dev The function can be called only by the owner of the keep and only\n if the keep has not been already closed.",
            "id": 1953,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1940,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1939,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1085,
                  "src": "4844:9:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "4844:9:2"
              },
              {
                "arguments": null,
                "id": 1942,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1941,
                  "name": "onlyWhenActive",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1108,
                  "src": "4854:14:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "4854:14:2"
              }
            ],
            "name": "closeKeep",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1938,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4834:2:2"
            },
            "returnParameters": {
              "id": 1943,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4869:0:2"
            },
            "scope": 2057,
            "src": "4816:117:2",
            "stateMutability": "nonpayable",
            "superFunction": 802,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1964,
              "nodeType": "Block",
              "src": "5010:68:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1956,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22587,
                        "src": "5020:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_BondedECDSAKeep_$2057",
                          "typeString": "contract super BondedECDSAKeep"
                        }
                      },
                      "id": 1958,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "terminateKeep",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1063,
                      "src": "5020:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1959,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5020:21:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1960,
                  "nodeType": "ExpressionStatement",
                  "src": "5020:21:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1961,
                      "name": "unlockMemberStakes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2043,
                      "src": "5051:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1962,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5051:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1963,
                  "nodeType": "ExpressionStatement",
                  "src": "5051:20:2"
                }
              ]
            },
            "documentation": "@notice Terminates the keep.",
            "id": 1965,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "terminateKeep",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1954,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4998:2:2"
            },
            "returnParameters": {
              "id": 1955,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5010:0:2"
            },
            "scope": 2057,
            "src": "4976:102:2",
            "stateMutability": "nonpayable",
            "superFunction": 1063,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1989,
              "nodeType": "Block",
              "src": "5127:586:2",
              "statements": [
                {
                  "assignments": [
                    1969,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1969,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 1989,
                      "src": "5177:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1968,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "5177:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 1981,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "736c6173682875696e743235362c616464726573735b5d29",
                            "id": 1976,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5296:26:2",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_8e49aa7a1ce47b524f70190a9d704847ca65b98c5419534ef72f86598f88e1ab",
                              "typeString": "literal_string \"slash(uint256,address[])\""
                            },
                            "value": "slash(uint256,address[])"
                          },
                          {
                            "argumentTypes": null,
                            "id": 1977,
                            "name": "memberStake",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1874,
                            "src": "5344:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1978,
                            "name": "members",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30,
                            "src": "5377:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_8e49aa7a1ce47b524f70190a9d704847ca65b98c5419534ef72f86598f88e1ab",
                              "typeString": "literal_string \"slash(uint256,address[])\""
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1974,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 22435,
                            "src": "5251:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1975,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "5251:23:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1979,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5251:151:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1971,
                            "name": "tokenStaking",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1878,
                            "src": "5215:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TokenStaking_$14180",
                              "typeString": "contract TokenStaking"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_TokenStaking_$14180",
                              "typeString": "contract TokenStaking"
                            }
                          ],
                          "id": 1970,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5207:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 1972,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5207:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1973,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "call",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "5207:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 1980,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5207:209:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5176:240:2"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 1983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "5651:8:2",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 1982,
                      "name": "success",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1969,
                      "src": "5652:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1988,
                  "nodeType": "IfStatement",
                  "src": "5647:60:2",
                  "trueBody": {
                    "id": 1987,
                    "nodeType": "Block",
                    "src": "5661:46:2",
                    "statements": [
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1984,
                            "name": "SlashingFailed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1876,
                            "src": "5680:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 1985,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5680:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1986,
                        "nodeType": "EmitStatement",
                        "src": "5675:21:2"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 1990,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "slashForSignatureFraud",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1966,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5115:2:2"
            },
            "returnParameters": {
              "id": 1967,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5127:0:2"
            },
            "scope": 2057,
            "src": "5084:629:2",
            "stateMutability": "nonpayable",
            "superFunction": 1066,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2017,
              "nodeType": "Block",
              "src": "5904:140:2",
              "statements": [
                {
                  "body": {
                    "id": 2015,
                    "nodeType": "Block",
                    "src": "5959:79:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2009,
                                "name": "members",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30,
                                "src": "5996:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                  "typeString": "address[] storage ref"
                                }
                              },
                              "id": 2011,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2010,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1996,
                                "src": "6004:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5996:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2012,
                              "name": "_stakeLockDuration",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1992,
                              "src": "6008:18:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2006,
                              "name": "tokenStaking",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "5973:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_TokenStaking_$14180",
                                "typeString": "contract TokenStaking"
                              }
                            },
                            "id": 2008,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lockStake",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 13535,
                            "src": "5973:22:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 2013,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5973:54:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2014,
                        "nodeType": "ExpressionStatement",
                        "src": "5973:54:2"
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2002,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 1999,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1996,
                      "src": "5934:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 2000,
                        "name": "members",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "5938:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 2001,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "5938:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5934:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2016,
                  "initializationExpression": {
                    "assignments": [
                      1996
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 1996,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 2016,
                        "src": "5919:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1995,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5919:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 1998,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1997,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5931:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "5919:13:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 2004,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "5954:3:2",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 2003,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1996,
                        "src": "5954:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 2005,
                    "nodeType": "ExpressionStatement",
                    "src": "5954:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "5914:124:2"
                }
              ]
            },
            "documentation": "@notice Creates locks on members' token stakes.\n @param _stakeLockDuration Stake lock duration in seconds.",
            "id": 2018,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "lockMemberStakes",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1993,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1992,
                  "name": "_stakeLockDuration",
                  "nodeType": "VariableDeclaration",
                  "scope": 2018,
                  "src": "5867:26:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1991,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5867:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5866:28:2"
            },
            "returnParameters": {
              "id": 1994,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5904:0:2"
            },
            "scope": 2057,
            "src": "5841:203:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2042,
              "nodeType": "Block",
              "src": "6189:122:2",
              "statements": [
                {
                  "body": {
                    "id": 2040,
                    "nodeType": "Block",
                    "src": "6244:61:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2035,
                                "name": "members",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30,
                                "src": "6283:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                  "typeString": "address[] storage ref"
                                }
                              },
                              "id": 2037,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2036,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2022,
                                "src": "6291:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6283:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2032,
                              "name": "tokenStaking",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "6258:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_TokenStaking_$14180",
                                "typeString": "contract TokenStaking"
                              }
                            },
                            "id": 2034,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "unlockStake",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 13556,
                            "src": "6258:24:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address) external"
                            }
                          },
                          "id": 2038,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6258:36:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2039,
                        "nodeType": "ExpressionStatement",
                        "src": "6258:36:2"
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2028,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 2025,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2022,
                      "src": "6219:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 2026,
                        "name": "members",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "6223:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 2027,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "6223:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6219:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2041,
                  "initializationExpression": {
                    "assignments": [
                      2022
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 2022,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 2041,
                        "src": "6204:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2021,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6204:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 2024,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 2023,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6216:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "6204:13:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 2030,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "6239:3:2",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 2029,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2022,
                        "src": "6239:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 2031,
                    "nodeType": "ExpressionStatement",
                    "src": "6239:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "6199:106:2"
                }
              ]
            },
            "documentation": "@notice Releases locks the keep had previously placed on the members'\n token stakes.",
            "id": 2043,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "unlockMemberStakes",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2019,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6177:2:2"
            },
            "returnParameters": {
              "id": 2020,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6189:0:2"
            },
            "scope": 2057,
            "src": "6150:161:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2055,
              "nodeType": "Block",
              "src": "6572:59:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2052,
                        "name": "_member",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2045,
                        "src": "6616:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 2050,
                        "name": "tokenStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1878,
                        "src": "6589:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_TokenStaking_$14180",
                          "typeString": "contract TokenStaking"
                        }
                      },
                      "id": 2051,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "beneficiaryOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11166,
                      "src": "6589:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_address_payable_$",
                        "typeString": "function (address) view external returns (address payable)"
                      }
                    },
                    "id": 2053,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6589:35:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "functionReturnParameters": 2049,
                  "id": 2054,
                  "nodeType": "Return",
                  "src": "6582:42:2"
                }
              ]
            },
            "documentation": "@notice Gets the beneficiary for the specified member address.\n @param _member Member address.\n @return Beneficiary address.",
            "id": 2056,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "beneficiaryOf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2046,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2045,
                  "name": "_member",
                  "nodeType": "VariableDeclaration",
                  "scope": 2056,
                  "src": "6487:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2044,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6487:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6486:17:2"
            },
            "returnParameters": {
              "id": 2049,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2048,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2056,
                  "src": "6551:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 2047,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6551:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6550:17:2"
            },
            "scope": 2057,
            "src": "6464:167:2",
            "stateMutability": "view",
            "superFunction": 1073,
            "visibility": "internal"
          }
        ],
        "scope": 2058,
        "src": "2214:4419:2"
      }
    ],
    "src": "1837:4797:2"
  },
  "legacyAST": {
    "absolutePath": "/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/BondedECDSAKeep.sol",
    "exportedSymbols": {
      "BondedECDSAKeep": [
        2057
      ]
    },
    "id": 2058,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1867,
        "literals": [
          "solidity",
          "0.5",
          ".17"
        ],
        "nodeType": "PragmaDirective",
        "src": "1837:23:2"
      },
      {
        "absolutePath": "/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/AbstractBondedECDSAKeep.sol",
        "file": "./AbstractBondedECDSAKeep.sol",
        "id": 1868,
        "nodeType": "ImportDirective",
        "scope": 2058,
        "sourceUnit": 1110,
        "src": "1862:39:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/kowal/Projects/sovryn/keep-ecdsa/solidity/contracts/BondedECDSAKeepFactory.sol",
        "file": "./BondedECDSAKeepFactory.sol",
        "id": 1869,
        "nodeType": "ImportDirective",
        "scope": 2058,
        "sourceUnit": 2472,
        "src": "1902:38:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@keep-network/keep-core/contracts/TokenStaking.sol",
        "file": "@keep-network/keep-core/contracts/TokenStaking.sol",
        "id": 1870,
        "nodeType": "ImportDirective",
        "scope": 2058,
        "sourceUnit": 14181,
        "src": "1942:60:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1871,
              "name": "AbstractBondedECDSAKeep",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1109,
              "src": "2242:23:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_AbstractBondedECDSAKeep_$1109",
                "typeString": "contract AbstractBondedECDSAKeep"
              }
            },
            "id": 1872,
            "nodeType": "InheritanceSpecifier",
            "src": "2242:23:2"
          }
        ],
        "contractDependencies": [
          1109,
          5710
        ],
        "contractKind": "contract",
        "documentation": "@title Bonded ECDSA Keep\n @notice ECDSA keep with additional signer bond requirement.\n @dev This contract is used as a master contract for clone factory in\n BondedECDSAKeepFactory as per EIP-1167.",
        "fullyImplemented": true,
        "id": 2057,
        "linearizedBaseContracts": [
          2057,
          1109,
          5710
        ],
        "name": "BondedECDSAKeep",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1874,
            "name": "memberStake",
            "nodeType": "VariableDeclaration",
            "scope": 2057,
            "src": "2395:26:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1873,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2395:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1876,
            "name": "SlashingFailed",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1875,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2836:2:2"
            },
            "src": "2816:23:2"
          },
          {
            "constant": false,
            "id": 1878,
            "name": "tokenStaking",
            "nodeType": "VariableDeclaration",
            "scope": 2057,
            "src": "2845:25:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_TokenStaking_$14180",
              "typeString": "contract TokenStaking"
            },
            "typeName": {
              "contractScope": null,
              "id": 1877,
              "name": "TokenStaking",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 14180,
              "src": "2845:12:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TokenStaking_$14180",
                "typeString": "contract TokenStaking"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1936,
              "nodeType": "Block",
              "src": "3974:475:2",
              "statements": [
                {
                  "assignments": [
                    1899
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1899,
                      "name": "_bondTokenAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 1936,
                      "src": "3984:25:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1898,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3984:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1905,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1901,
                            "name": "_keepFactory",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1895,
                            "src": "4047:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1900,
                          "name": "BondedECDSAKeepFactory",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2471,
                          "src": "4024:22:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_BondedECDSAKeepFactory_$2471_$",
                            "typeString": "type(contract BondedECDSAKeepFactory)"
                          }
                        },
                        "id": 1902,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4024:36:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_BondedECDSAKeepFactory_$2471",
                          "typeString": "contract BondedECDSAKeepFactory"
                        }
                      },
                      "id": 1903,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "bondTokenAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2118,
                      "src": "4024:53:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 1904,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4024:55:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3984:95:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1909,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1880,
                        "src": "4120:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1910,
                        "name": "_members",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1883,
                        "src": "4140:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1911,
                        "name": "_honestThreshold",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1885,
                        "src": "4162:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1912,
                        "name": "_keepBonding",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1893,
                        "src": "4192:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1913,
                        "name": "_bondTokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1899,
                        "src": "4218:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1906,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22587,
                        "src": "4090:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_BondedECDSAKeep_$2057",
                          "typeString": "contract super BondedECDSAKeep"
                        }
                      },
                      "id": 1908,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialize",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 959,
                      "src": "4090:16:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address[] memory,uint256,address,address)"
                      }
                    },
                    "id": 1914,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4090:155:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1915,
                  "nodeType": "ExpressionStatement",
                  "src": "4090:155:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1918,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1916,
                      "name": "memberStake",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1874,
                      "src": "4256:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1917,
                      "name": "_memberStake",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1887,
                      "src": "4270:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4256:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1919,
                  "nodeType": "ExpressionStatement",
                  "src": "4256:26:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1924,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1920,
                      "name": "tokenStaking",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1878,
                      "src": "4292:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_TokenStaking_$14180",
                        "typeString": "contract TokenStaking"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 1922,
                          "name": "_tokenStaking",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1891,
                          "src": "4320:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1921,
                        "name": "TokenStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 14180,
                        "src": "4307:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_TokenStaking_$14180_$",
                          "typeString": "type(contract TokenStaking)"
                        }
                      },
                      "id": 1923,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4307:27:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_TokenStaking_$14180",
                        "typeString": "contract TokenStaking"
                      }
                    },
                    "src": "4292:42:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_TokenStaking_$14180",
                      "typeString": "contract TokenStaking"
                    }
                  },
                  "id": 1925,
                  "nodeType": "ExpressionStatement",
                  "src": "4292:42:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1929,
                        "name": "_keepFactory",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1895,
                        "src": "4382:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1926,
                        "name": "tokenStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1878,
                        "src": "4345:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_TokenStaking_$14180",
                          "typeString": "contract TokenStaking"
                        }
                      },
                      "id": 1928,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "claimDelegatedAuthority",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8174,
                      "src": "4345:36:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address) external"
                      }
                    },
                    "id": 1930,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4345:50:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1931,
                  "nodeType": "ExpressionStatement",
                  "src": "4345:50:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1933,
                        "name": "_stakeLockDuration",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1889,
                        "src": "4423:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1932,
                      "name": "lockMemberStakes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2018,
                      "src": "4406:16:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1934,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4406:36:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1935,
                  "nodeType": "ExpressionStatement",
                  "src": "4406:36:2"
                }
              ]
            },
            "documentation": "@notice Initialization function.\n @dev We use clone factory to create new keep. That is why this contract\n doesn't have a constructor. We provide keep parameters for each instance\n function after cloning instances from the master contract.\n @param _owner Address of the keep owner.\n @param _members Addresses of the keep members.\n @param _honestThreshold Minimum number of honest keep members.\n @param _memberStake Stake required from each keep member.\n @param _stakeLockDuration Stake lock duration in seconds.\n @param _tokenStaking Address of the TokenStaking contract.\n @param _keepBonding Address of the KeepBonding contract.\n @param _keepFactory Address of the BondedECDSAKeepFactory that created\n this keep.",
            "id": 1937,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1896,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1880,
                  "name": "_owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3712:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1879,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3712:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1883,
                  "name": "_members",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3736:25:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1881,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3736:7:2",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1882,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "3736:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1885,
                  "name": "_honestThreshold",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3771:24:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1884,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3771:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1887,
                  "name": "_memberStake",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3805:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1886,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3805:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1889,
                  "name": "_stakeLockDuration",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3835:26:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1888,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3835:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1891,
                  "name": "_tokenStaking",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3871:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1890,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3871:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1893,
                  "name": "_keepBonding",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3902:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1892,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3902:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1895,
                  "name": "_keepFactory",
                  "nodeType": "VariableDeclaration",
                  "scope": 1937,
                  "src": "3932:28:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 1894,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3932:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3702:264:2"
            },
            "returnParameters": {
              "id": 1897,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3974:0:2"
            },
            "scope": 2057,
            "src": "3683:766:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1952,
              "nodeType": "Block",
              "src": "4869:64:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1944,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22587,
                        "src": "4879:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_BondedECDSAKeep_$2057",
                          "typeString": "contract super BondedECDSAKeep"
                        }
                      },
                      "id": 1946,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "closeKeep",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 802,
                      "src": "4879:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1947,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4879:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1948,
                  "nodeType": "ExpressionStatement",
                  "src": "4879:17:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1949,
                      "name": "unlockMemberStakes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2043,
                      "src": "4906:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1950,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4906:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1951,
                  "nodeType": "ExpressionStatement",
                  "src": "4906:20:2"
                }
              ]
            },
            "documentation": "@notice Closes keep when owner decides that they no longer need it.\n Releases bonds to the keep members. Keep can be closed only when\n there is no signing in progress or requested signing process has timed out.\n @dev The function can be called only by the owner of the keep and only\n if the keep has not been already closed.",
            "id": 1953,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1940,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1939,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1085,
                  "src": "4844:9:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "4844:9:2"
              },
              {
                "arguments": null,
                "id": 1942,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1941,
                  "name": "onlyWhenActive",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1108,
                  "src": "4854:14:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "4854:14:2"
              }
            ],
            "name": "closeKeep",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1938,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4834:2:2"
            },
            "returnParameters": {
              "id": 1943,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4869:0:2"
            },
            "scope": 2057,
            "src": "4816:117:2",
            "stateMutability": "nonpayable",
            "superFunction": 802,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1964,
              "nodeType": "Block",
              "src": "5010:68:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1956,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 22587,
                        "src": "5020:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_BondedECDSAKeep_$2057",
                          "typeString": "contract super BondedECDSAKeep"
                        }
                      },
                      "id": 1958,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "terminateKeep",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1063,
                      "src": "5020:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1959,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5020:21:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1960,
                  "nodeType": "ExpressionStatement",
                  "src": "5020:21:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1961,
                      "name": "unlockMemberStakes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2043,
                      "src": "5051:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 1962,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5051:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1963,
                  "nodeType": "ExpressionStatement",
                  "src": "5051:20:2"
                }
              ]
            },
            "documentation": "@notice Terminates the keep.",
            "id": 1965,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "terminateKeep",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1954,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4998:2:2"
            },
            "returnParameters": {
              "id": 1955,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5010:0:2"
            },
            "scope": 2057,
            "src": "4976:102:2",
            "stateMutability": "nonpayable",
            "superFunction": 1063,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1989,
              "nodeType": "Block",
              "src": "5127:586:2",
              "statements": [
                {
                  "assignments": [
                    1969,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1969,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 1989,
                      "src": "5177:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1968,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "5177:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 1981,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "736c6173682875696e743235362c616464726573735b5d29",
                            "id": 1976,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5296:26:2",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_8e49aa7a1ce47b524f70190a9d704847ca65b98c5419534ef72f86598f88e1ab",
                              "typeString": "literal_string \"slash(uint256,address[])\""
                            },
                            "value": "slash(uint256,address[])"
                          },
                          {
                            "argumentTypes": null,
                            "id": 1977,
                            "name": "memberStake",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1874,
                            "src": "5344:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1978,
                            "name": "members",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30,
                            "src": "5377:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_8e49aa7a1ce47b524f70190a9d704847ca65b98c5419534ef72f86598f88e1ab",
                              "typeString": "literal_string \"slash(uint256,address[])\""
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1974,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 22435,
                            "src": "5251:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1975,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodeWithSignature",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "5251:23:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function (string memory) pure returns (bytes memory)"
                          }
                        },
                        "id": 1979,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5251:151:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1971,
                            "name": "tokenStaking",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1878,
                            "src": "5215:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TokenStaking_$14180",
                              "typeString": "contract TokenStaking"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_TokenStaking_$14180",
                              "typeString": "contract TokenStaking"
                            }
                          ],
                          "id": 1970,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5207:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 1972,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5207:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1973,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "call",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "5207:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 1980,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5207:209:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5176:240:2"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "id": 1983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "5651:8:2",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 1982,
                      "name": "success",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1969,
                      "src": "5652:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1988,
                  "nodeType": "IfStatement",
                  "src": "5647:60:2",
                  "trueBody": {
                    "id": 1987,
                    "nodeType": "Block",
                    "src": "5661:46:2",
                    "statements": [
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1984,
                            "name": "SlashingFailed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1876,
                            "src": "5680:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 1985,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5680:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1986,
                        "nodeType": "EmitStatement",
                        "src": "5675:21:2"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 1990,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "slashForSignatureFraud",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1966,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5115:2:2"
            },
            "returnParameters": {
              "id": 1967,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5127:0:2"
            },
            "scope": 2057,
            "src": "5084:629:2",
            "stateMutability": "nonpayable",
            "superFunction": 1066,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2017,
              "nodeType": "Block",
              "src": "5904:140:2",
              "statements": [
                {
                  "body": {
                    "id": 2015,
                    "nodeType": "Block",
                    "src": "5959:79:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2009,
                                "name": "members",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30,
                                "src": "5996:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                  "typeString": "address[] storage ref"
                                }
                              },
                              "id": 2011,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2010,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1996,
                                "src": "6004:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5996:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2012,
                              "name": "_stakeLockDuration",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1992,
                              "src": "6008:18:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2006,
                              "name": "tokenStaking",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "5973:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_TokenStaking_$14180",
                                "typeString": "contract TokenStaking"
                              }
                            },
                            "id": 2008,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "lockStake",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 13535,
                            "src": "5973:22:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 2013,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5973:54:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2014,
                        "nodeType": "ExpressionStatement",
                        "src": "5973:54:2"
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2002,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 1999,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1996,
                      "src": "5934:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 2000,
                        "name": "members",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "5938:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 2001,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "5938:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5934:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2016,
                  "initializationExpression": {
                    "assignments": [
                      1996
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 1996,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 2016,
                        "src": "5919:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1995,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5919:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 1998,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1997,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5931:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "5919:13:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 2004,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "5954:3:2",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 2003,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1996,
                        "src": "5954:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 2005,
                    "nodeType": "ExpressionStatement",
                    "src": "5954:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "5914:124:2"
                }
              ]
            },
            "documentation": "@notice Creates locks on members' token stakes.\n @param _stakeLockDuration Stake lock duration in seconds.",
            "id": 2018,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "lockMemberStakes",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1993,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1992,
                  "name": "_stakeLockDuration",
                  "nodeType": "VariableDeclaration",
                  "scope": 2018,
                  "src": "5867:26:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1991,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5867:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5866:28:2"
            },
            "returnParameters": {
              "id": 1994,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5904:0:2"
            },
            "scope": 2057,
            "src": "5841:203:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2042,
              "nodeType": "Block",
              "src": "6189:122:2",
              "statements": [
                {
                  "body": {
                    "id": 2040,
                    "nodeType": "Block",
                    "src": "6244:61:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2035,
                                "name": "members",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30,
                                "src": "6283:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                  "typeString": "address[] storage ref"
                                }
                              },
                              "id": 2037,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2036,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2022,
                                "src": "6291:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6283:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2032,
                              "name": "tokenStaking",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1878,
                              "src": "6258:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_TokenStaking_$14180",
                                "typeString": "contract TokenStaking"
                              }
                            },
                            "id": 2034,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "unlockStake",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 13556,
                            "src": "6258:24:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address) external"
                            }
                          },
                          "id": 2038,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6258:36:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2039,
                        "nodeType": "ExpressionStatement",
                        "src": "6258:36:2"
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2028,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 2025,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2022,
                      "src": "6219:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 2026,
                        "name": "members",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "6223:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_storage",
                          "typeString": "address[] storage ref"
                        }
                      },
                      "id": 2027,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "6223:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6219:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2041,
                  "initializationExpression": {
                    "assignments": [
                      2022
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 2022,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 2041,
                        "src": "6204:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2021,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6204:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 2024,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 2023,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6216:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "6204:13:2"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 2030,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "6239:3:2",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 2029,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2022,
                        "src": "6239:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 2031,
                    "nodeType": "ExpressionStatement",
                    "src": "6239:3:2"
                  },
                  "nodeType": "ForStatement",
                  "src": "6199:106:2"
                }
              ]
            },
            "documentation": "@notice Releases locks the keep had previously placed on the members'\n token stakes.",
            "id": 2043,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "unlockMemberStakes",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2019,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6177:2:2"
            },
            "returnParameters": {
              "id": 2020,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6189:0:2"
            },
            "scope": 2057,
            "src": "6150:161:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2055,
              "nodeType": "Block",
              "src": "6572:59:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 2052,
                        "name": "_member",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2045,
                        "src": "6616:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 2050,
                        "name": "tokenStaking",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1878,
                        "src": "6589:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_TokenStaking_$14180",
                          "typeString": "contract TokenStaking"
                        }
                      },
                      "id": 2051,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "beneficiaryOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 11166,
                      "src": "6589:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_address_payable_$",
                        "typeString": "function (address) view external returns (address payable)"
                      }
                    },
                    "id": 2053,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6589:35:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "functionReturnParameters": 2049,
                  "id": 2054,
                  "nodeType": "Return",
                  "src": "6582:42:2"
                }
              ]
            },
            "documentation": "@notice Gets the beneficiary for the specified member address.\n @param _member Member address.\n @return Beneficiary address.",
            "id": 2056,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "beneficiaryOf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2046,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2045,
                  "name": "_member",
                  "nodeType": "VariableDeclaration",
                  "scope": 2056,
                  "src": "6487:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2044,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6487:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6486:17:2"
            },
            "returnParameters": {
              "id": 2049,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2048,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 2056,
                  "src": "6551:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 2047,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6551:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6550:17:2"
            },
            "scope": 2057,
            "src": "6464:167:2",
            "stateMutability": "view",
            "superFunction": 1073,
            "visibility": "internal"
          }
        ],
        "scope": 2058,
        "src": "2214:4419:2"
      }
    ],
    "src": "1837:4797:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {
    "31": {
      "events": {
        "0x99d98e35ad6445ac964c46a75c7f748e8f390ebdca5a924cd8f92d674fa34ff7": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "submittingMember",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "conflictingPublicKey",
              "type": "bytes"
            }
          ],
          "name": "ConflictingPublicKeySubmitted",
          "type": "event",
          "signature": "0x99d98e35ad6445ac964c46a75c7f748e8f390ebdca5a924cd8f92d674fa34ff7"
        },
        "0xb69f5873bb2e9e1cc495d5c23d2995010c3b5cdd1756e3cada2bc3f2150902cc": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "ERC20RewardDistributed",
          "type": "event",
          "signature": "0xb69f5873bb2e9e1cc495d5c23d2995010c3b5cdd1756e3cada2bc3f2150902cc"
        },
        "0xa9e4160b29b5c7db7fa61c512c4b45e7c3451c3331537f065a3417778cea5096": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "ETHRewardDistributed",
          "type": "event",
          "signature": "0xa9e4160b29b5c7db7fa61c512c4b45e7c3451c3331537f065a3417778cea5096"
        },
        "0x400fd7ee62b209afddce9dfbca204b2124c135597dff0ac92e9844e2b08927f6": {
          "anonymous": false,
          "inputs": [],
          "name": "KeepClosed",
          "type": "event",
          "signature": "0x400fd7ee62b209afddce9dfbca204b2124c135597dff0ac92e9844e2b08927f6"
        },
        "0x39f530c1293a870138e53618b826819a76f1fe86b5d500ba4622f9e8354a846a": {
          "anonymous": false,
          "inputs": [],
          "name": "KeepTerminated",
          "type": "event",
          "signature": "0x39f530c1293a870138e53618b826819a76f1fe86b5d500ba4622f9e8354a846a"
        },
        "0xf62bba8b270bef3e8d0fcebc1f86567664da8ccbd03e8509d6231cc8d63f4b31": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "name": "PublicKeyPublished",
          "type": "event",
          "signature": "0xf62bba8b270bef3e8d0fcebc1f86567664da8ccbd03e8509d6231cc8d63f4b31"
        },
        "0x34f611bedd4f8c135323bbfc4921e3f6e4feb7eef591036eed6af5462e6cfab0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "digest",
              "type": "bytes32"
            }
          ],
          "name": "SignatureRequested",
          "type": "event",
          "signature": "0x34f611bedd4f8c135323bbfc4921e3f6e4feb7eef591036eed6af5462e6cfab0"
        },
        "0xb19546e9e0b503d103dd4ae295f4d526e9115adf7c902ead329b1f2404efd35f": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "digest",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "recoveryID",
              "type": "uint8"
            }
          ],
          "name": "SignatureSubmitted",
          "type": "event",
          "signature": "0xb19546e9e0b503d103dd4ae295f4d526e9115adf7c902ead329b1f2404efd35f"
        },
        "0x9caa8d499152520a1b3e11b41d51a51e5d1699294ebccdb9de0faa824dba8aae": {
          "anonymous": false,
          "inputs": [],
          "name": "SlashingFailed",
          "type": "event",
          "signature": "0x9caa8d499152520a1b3e11b41d51a51e5d1699294ebccdb9de0faa824dba8aae"
        }
      },
      "links": {},
      "address": "0x08aAF5e270d30122f4666f22E5baCF470B0f43D0",
      "transactionHash": "0xc5eba1ad0bf4796e23707ac302ab66f16597062d31e253ac759b769bf39c8e70"
    }
  },
  "schemaVersion": "3.0.22",
  "updatedAt": "2021-02-01T13:33:05.553Z",
  "networkType": "ethereum",
  "devdoc": {
    "details": "This contract is used as a master contract for clone factory in BondedECDSAKeepFactory as per EIP-1167.",
    "methods": {
      "checkBondAmount()": {
        "return": "The amount of the keep's ETH bond in wei."
      },
      "checkSignatureFraud(uint8,bytes32,bytes32,bytes32,bytes)": {
        "details": "The function expects the signed digest to be calculated as a sha256 hash of the preimage: `sha256(_preimage))`. The digest is verified against the preimage to ensure the security of the ECDSA protocol. Verifying just the signature and the digest is not enough and leaves the possibility of the the existential forgery. If digest and preimage verification fails the function reverts. Reverts if a public key has not been set for the keep yet.",
        "params": {
          "_preimage": "Preimage of the hashed message.",
          "_r": "R part of ECDSA signature.",
          "_s": "S part of ECDSA signature.",
          "_signedDigest": "Digest for the provided signature. Result of hashing the preimage with sha256.",
          "_v": "Signature's header byte: `27 + recoveryID`."
        },
        "return": "True if fraud, false otherwise."
      },
      "closeKeep()": {
        "details": "The function can be called only by the owner of the keep and only if the keep has not been already closed."
      },
      "distributeERC20Reward(address,uint256)": {
        "details": "This works with any ERC20 token that implements a transferFrom function similar to the interface imported here from OpenZeppelin. This function only has authority over pre-approved token amount. We don't explicitly check for allowance, SafeMath subtraction overflow is enough protection. If the value cannot be divided evenly across the signers, it submits the remainder to the last keep signer.",
        "params": {
          "_tokenAddress": "Address of the ERC20 token to distribute.",
          "_value": "Amount of ERC20 token to distribute."
        }
      },
      "distributeETHReward()": {
        "details": "Only the value passed to this function is distributed. This function does not transfer the value to beneficiaries accounts; instead it holds the value in the contract until withdraw function is called for the specific signer."
      },
      "getMemberETHBalance(address)": {
        "params": {
          "_member": "Keep member address."
        },
        "return": "Current balance in wei."
      },
      "getMembers()": {
        "return": "List of the keep members' addresses."
      },
      "getOpenedTimestamp()": {
        "return": "Timestamp the keep was opened at."
      },
      "getOwner()": {
        "return": "Address of the keep owner."
      },
      "getPublicKey()": {
        "return": "Keep's ECDSA public key."
      },
      "initialize(address,address[],uint256,uint256,uint256,address,address,address)": {
        "details": "We use clone factory to create new keep. That is why this contract doesn't have a constructor. We provide keep parameters for each instance function after cloning instances from the master contract.",
        "params": {
          "_honestThreshold": "Minimum number of honest keep members.",
          "_keepBonding": "Address of the KeepBonding contract.",
          "_keepFactory": "Address of the BondedECDSAKeepFactory that created this keep.",
          "_memberStake": "Stake required from each keep member.",
          "_members": "Addresses of the keep members.",
          "_owner": "Address of the keep owner.",
          "_stakeLockDuration": "Stake lock duration in seconds.",
          "_tokenStaking": "Address of the TokenStaking contract."
        }
      },
      "isActive()": {
        "return": "true if the keep is active, false otherwise."
      },
      "isAwaitingSignature(bytes32)": {
        "details": "Validates if the signing is currently in progress and compares provided digest with the one for which the latest signature was requested.",
        "params": {
          "_digest": "Digest for which to check if signature is being awaited."
        },
        "return": "True if the digest is currently expected to be signed, else false."
      },
      "isClosed()": {
        "return": "true if the keep is closed, false otherwise."
      },
      "isTerminated()": {
        "return": "true if the keep has been terminated, false otherwise."
      },
      "sign(bytes32)": {
        "details": "Only one signing process can be in progress at a time.",
        "params": {
          "_digest": "Digest to be signed."
        }
      },
      "submitPublicKey(bytes)": {
        "details": "Public key is published successfully if all members submit the same value. In case of conflicts with others members submissions it will emit `ConflictingPublicKeySubmitted` event. When all submitted keys match it will store the key as keep's public key and emit a `PublicKeyPublished` event.",
        "params": {
          "_publicKey": "Signer's public key."
        }
      },
      "submitSignature(bytes32,bytes32,uint8)": {
        "details": "Fails if signature has not been requested or a signature has already been submitted. Validates s value to ensure it's in the lower half of the secp256k1 curve's order.",
        "params": {
          "_r": "Calculated signature's R value.",
          "_recoveryID": "Calculated signature's recovery ID (one of {0, 1, 2, 3}).",
          "_s": "Calculated signature's S value."
        }
      },
      "submitSignatureFraud(uint8,bytes32,bytes32,bytes32,bytes)": {
        "details": "The function expects the signed digest to be calculated as a sha256 hash of the preimage: `sha256(_preimage))`. The function reverts if the signature is not fraudulent. The function does not revert if KEEP slashing failed but emits an event instead. In practice, KEEP slashing should never fail.",
        "params": {
          "_preimage": "Preimage of the hashed message.",
          "_r": "R part of ECDSA signature.",
          "_s": "S part of ECDSA signature.",
          "_signedDigest": "Digest for the provided signature. Result of hashing the preimage with sha256.",
          "_v": "Signature's header byte: `27 + recoveryID`."
        },
        "return": "True if fraud, error otherwise."
      },
      "withdraw(address)": {
        "params": {
          "_member": "Keep member address."
        }
      }
    },
    "title": "Bonded ECDSA Keep"
  },
  "userdoc": {
    "methods": {
      "checkBondAmount()": {
        "notice": "Returns the amount of the keep's ETH bond in wei."
      },
      "checkSignatureFraud(uint8,bytes32,bytes32,bytes32,bytes)": {
        "notice": "Checks a fraud proof for a valid signature from this keep that was not first approved via a call to sign."
      },
      "closeKeep()": {
        "notice": "Closes keep when owner decides that they no longer need it. Releases bonds to the keep members. Keep can be closed only when there is no signing in progress or requested signing process has timed out."
      },
      "distributeERC20Reward(address,uint256)": {
        "notice": "Distributes ERC20 reward evenly across all keep signer beneficiaries."
      },
      "distributeETHReward()": {
        "notice": "Distributes ETH reward evenly across all keep signer beneficiaries. If the value cannot be divided evenly across all signers, it sends the remainder to the last keep signer."
      },
      "getMemberETHBalance(address)": {
        "notice": "Gets current amount of ETH hold in the keep for the member."
      },
      "getMembers()": {
        "notice": "Returns members of the keep."
      },
      "getOpenedTimestamp()": {
        "notice": "Gets the timestamp the keep was opened at."
      },
      "getOwner()": {
        "notice": "Gets the owner of the keep."
      },
      "getPublicKey()": {
        "notice": "Returns keep's ECDSA public key."
      },
      "initialize(address,address[],uint256,uint256,uint256,address,address,address)": {
        "notice": "Initialization function."
      },
      "isActive()": {
        "notice": "Returns true if the keep is active."
      },
      "isAwaitingSignature(bytes32)": {
        "notice": "Checks if keep is currently awaiting a signature for the given digest."
      },
      "isClosed()": {
        "notice": "Returns true if the keep is closed and members no longer support this keep."
      },
      "isTerminated()": {
        "notice": "Returns true if the keep has been terminated. Keep is terminated when bonds are seized and members no longer support this keep."
      },
      "returnPartialSignerBonds(uint256)": {
        "notice": "Returns partial signer's ETH bonds to the pool as an unbounded value. This function is called after bonds have been seized and processed by the privileged application after calling seizeSignerBonds function. It is entirely up to the application if a part of signers' bonds is returned. The application may decide for that but may also decide to seize bonds and do not return anything."
      },
      "seizeSignerBonds()": {
        "notice": "Seizes the signers' ETH bonds. After seizing bonds keep is closed so it will no longer respond to signing requests. Bonds can be seized only when there is no signing in progress or requested signing process has timed out. This function seizes all of signers' bonds. The application may decide to return part of bonds later after they are processed using returnPartialSignerBonds function."
      },
      "sign(bytes32)": {
        "notice": "Calculates a signature over provided digest by the keep."
      },
      "submitPublicKey(bytes)": {
        "notice": "Submits a public key to the keep."
      },
      "submitSignature(bytes32,bytes32,uint8)": {
        "notice": "Submits a signature calculated for the given digest."
      },
      "submitSignatureFraud(uint8,bytes32,bytes32,bytes32,bytes)": {
        "notice": "Submits a fraud proof for a valid signature from this keep that was not first approved via a call to sign. If fraud is detected it tries to slash members' KEEP tokens. For each keep member tries slashing amount equal to the member stake set by the factory when keep was created."
      },
      "withdraw(address)": {
        "notice": "Withdraws amount of ether hold in the keep for the member. The value is sent to the beneficiary of the specific member."
      }
    },
    "notice": "ECDSA keep with additional signer bond requirement."
  }
}